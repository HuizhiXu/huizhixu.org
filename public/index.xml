<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HuizhiXu 的个人博客</title>
    <link>https://huizhixu.github.io/</link>
    <description>Recent content on HuizhiXu 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 24 Oct 2022 20:51:00 +0800</lastBuildDate><atom:link href="https://huizhixu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022-10-24 如何在程序中起名</title>
      <link>https://huizhixu.github.io/post/20221024%E5%A6%82%E4%BD%95%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%B5%B7%E5%90%8D/</link>
      <pubDate>Mon, 24 Oct 2022 20:51:00 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20221024%E5%A6%82%E4%BD%95%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%B5%B7%E5%90%8D/</guid>
      <description>如何在程序中起名 最近检查以前写的代码，发现我给不同的功能函数或者变量起的名不是很精确。
比如数据处理这个阶段，就很容易取 data_process， get_data，process_data，data_preprocess，deal_with_data 这些名字。再比如很多类的主入口，我经常会写 run()、xx_driver() 等等。
想一个名字看起来简单，但是新建文件那一刻抓耳挠腮肚子里墨水空空，想不到好名字，无奈最后写下写了很多遍的 get_data 。于是学习给不同的功能函数或者变量取一些适合的名字迫在眉睫。
今天看了关于两篇起名建议的文章，一篇是《变量名不要起得他妈的那么长》，链接在这（https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/ ) 。我跟着这篇文章反省了一下，有时候为了区分很多种情，我就会用下划线连接好几个单词，我自己是觉得很容易读，应该满足 readability，但是有的单词很长，所以总体长度也很长，不是很 pythonic。
作者给了几个建议：
不要容易看出类型的名字后面加上类型，例如 name 就不要叫 namestring。
写复数，不要用单数加 collection。例如 holidays 比 holiday_list 好些。
我这个问题还挺严重的，因为我很喜欢写 xx_list，yy_dict 等。
在写 func 的名字的时候，不需要把参数也写在功能函数名称里面，因为参数列表能够看出来要处理什么参数。例如 merge(table_cells) 比 merge_table_cells(x) 要好。
要精确，不需要把每一个细节都写出。例如 recentlyUpdatedAnnualSalesBid 这里面每一个单词细节都值得推敲，看是不是为了确保独一性而加的，没有就要去掉。
变量名不要包含能从上下文看出来的单词。如果类名里面已经包含的单词，在类方法就不用再写了。
例如类名有 data，已经表明了这个类是和数据相关。那么方法可以直接写 process，不需要写 data_process。
变量名不要包含无意义的单词。 有以下这些：
data, state, amount, value, manager, engine, object, entity, and instance. Python 里面用类型注释很容易避免这些问题，就算用 results，不用 results_list 也可以很快看出 results 是一个 list，有时候是 list of list。
第二篇文章是这个《起名的那些事儿》，链接在这儿 https://journal.stuffwithstuff.com/2009/06/05/naming-things-in-code/ 。</description>
    </item>
    
    <item>
      <title>2022-08-02 用 HanLP 分词时如何自定义词典</title>
      <link>https://huizhixu.github.io/post/20220802%E7%94%A8hanlp%E5%88%86%E8%AF%8D%E6%97%B6%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%85%B8/</link>
      <pubDate>Tue, 02 Aug 2022 17:51:00 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220802%E7%94%A8hanlp%E5%88%86%E8%AF%8D%E6%97%B6%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%85%B8/</guid>
      <description>hanlp分词时自定义词典 用 hanlp 的效果比较好的粗粒度分词模型 COARSE_ELECTRA_SMALL_ZH 进行分析
碰到一个这样的句子：
&amp;lsquo;公司产品品质持续提升，单晶硅片用料比例大幅高于行业平均，单晶硅料价格上涨。&amp;rsquo;
import hanlp tok = hanlp.load(hanlp.pretrained.tok.COARSE_ELECTRA_SMALL_ZH) sentence = &amp;#39;公司产品品质持续提升，单晶硅片用料比例大幅高于行业平均，单晶硅料价格上涨。&amp;#39; sen_list = tok(sentence) print(sen_list) [&amp;#39;公司&amp;#39;, &amp;#39;产品&amp;#39;, &amp;#39;品质&amp;#39;, &amp;#39;持续&amp;#39;, &amp;#39;提升&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;单晶&amp;#39;, &amp;#39;硅&amp;#39;, &amp;#39;片&amp;#39;, &amp;#39;用&amp;#39;, &amp;#39;料&amp;#39;, &amp;#39;比例&amp;#39;, &amp;#39;大幅&amp;#39;, &amp;#39;高于&amp;#39;, &amp;#39;行业&amp;#39;, &amp;#39;平均&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;单晶&amp;#39;, &amp;#39;硅&amp;#39;, &amp;#39;料&amp;#39;, &amp;#39;价格&amp;#39;, &amp;#39;上涨&amp;#39;, &amp;#39;。&amp;#39;] 可以看出来，这里“单晶硅片”，“单晶硅料”， 被分为了“单晶”“硅”“料”和“单晶”“硅”“片”。
如果我们想要把“单晶硅”分出来。可以设置自定义词典。tok下面有两个参数：dict_force和dict_combine，通过设置这两个参数就可以达到自定义词典的效果。
dict_force和dict_combine有什么区别：
dict_force是强制模式，强制模式的优先级高于统计模型。如果强制模式用于所有文本，会对其他句子进行干扰，所以强制模式一般不用于所有文本，但是可以针对某个特定句子打补丁。
dict_combine是合并模式，合并模式的优先级低于统计模型。就是说句子先用统计模型分词，然后在这个分词的基础上，再进行最长匹配并合并。
先看一下dict_combine的例子：
tok.dict_force = None tok.dict_combine = {&amp;#39;单晶硅&amp;#39;} sentence = &amp;#39;公司产品品质持续提升，单晶硅片用料比例大幅高于行业平均，单晶硅料价格上涨。&amp;#39; [&amp;#39;公司&amp;#39;, &amp;#39;产品&amp;#39;, &amp;#39;品质&amp;#39;, &amp;#39;持续&amp;#39;, &amp;#39;提升&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;单晶硅&amp;#39;, &amp;#39;片&amp;#39;, &amp;#39;用&amp;#39;, &amp;#39;料&amp;#39;, &amp;#39;比例&amp;#39;, &amp;#39;大幅&amp;#39;, &amp;#39;高于&amp;#39;, &amp;#39;行业&amp;#39;, &amp;#39;平均&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;单晶硅&amp;#39;, &amp;#39;料&amp;#39;, &amp;#39;价格&amp;#39;, &amp;#39;上涨&amp;#39;, &amp;#39;。&amp;#39;] 我们一般会用dict_combine，这样就把“单晶硅”分出来了。</description>
    </item>
    
    <item>
      <title>2022-07-19 Thomas 拍的烂尾楼</title>
      <link>https://huizhixu.github.io/post/20220719thomas%E6%8B%8D%E7%9A%84%E7%83%82%E5%B0%BE%E6%A5%BC/</link>
      <pubDate>Tue, 19 Jul 2022 19:50:22 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220719thomas%E6%8B%8D%E7%9A%84%E7%83%82%E5%B0%BE%E6%A5%BC/</guid>
      <description>我很喜欢的摄影家 Thomas 最近发了一组照片&lt;a href=&#34;https://mp.weixin.qq.com/s/0fXR0oElN94qWOQdw3L6oQ&#34;&gt;《烂尾楼里面的微光》&lt;/a&gt; ，拍的是西安的两幢烂尾楼，这两幢楼都烂尾好几年了，没有人管。可能是迫于生存压力，某些业主在没通水电的情况下依然住进去了。</description>
    </item>
    
    <item>
      <title>2022-07-07 新现实是活在当下</title>
      <link>https://huizhixu.github.io/post/20220707%E6%96%B0%E7%8E%B0%E5%AE%9E%E6%98%AF%E6%B4%BB%E5%9C%A8%E5%BD%93%E4%B8%8B/</link>
      <pubDate>Thu, 07 Jul 2022 14:07:58 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220707%E6%96%B0%E7%8E%B0%E5%AE%9E%E6%98%AF%E6%B4%BB%E5%9C%A8%E5%BD%93%E4%B8%8B/</guid>
      <description>过去的一个礼拜的上海是今年最漂亮的上海，随便刷一刷小红书， 就可以看见满屏的”绝美晚霞“，“火烧云”，”绝美朝霞“，”绝美天空“， ”感觉在欧洲“。欧洲的风景那么美丽，除了历史的沉淀，蓝天白云的加分也是不少。第一次意识到上海也可以像欧洲那么美丽，哈哈。</description>
    </item>
    
    <item>
      <title>2022-06-29 今日上海</title>
      <link>https://huizhixu.github.io/post/20220629%E4%BB%8A%E6%97%A5%E4%B8%8A%E6%B5%B7/</link>
      <pubDate>Wed, 29 Jun 2022 19:22:05 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220629%E4%BB%8A%E6%97%A5%E4%B8%8A%E6%B5%B7/</guid>
      <description>今日上海 高温黄色警报 雷电黄色警报 暴雨蓝色警报 大风黄色警报 冰雹黄色警报
但是今日出现了彩虹</description>
    </item>
    
    <item>
      <title>2022-03-02 开始学习 FastAPI 了</title>
      <link>https://huizhixu.github.io/post/20220302%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0fastapi%E4%BA%86/</link>
      <pubDate>Wed, 02 Mar 2022 20:07:58 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220302%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0fastapi%E4%BA%86/</guid>
      <description>最近工作中要用到FastAPI，于是昨天下午在学习FastAPI，我告诉自己，把这个教程（https://fastapi.tiangolo.com/zh/tutorial/body/ ） 学完，我就会了。
学着学着突然就emo了，觉得在互联网行业一直要学习新的东西，这个过程是无休止的，何时是个头啊。
正沮丧着，在浏览器上我发现了一个很久没有打开的标签文件夹——blog，里面是我这几年收藏的博客和专题网站。于是我开始一个个点开，看有哪些人还在更新。
其中有一个网站，我看了好久。
日志 - Yihui Xie | 谢益辉
看完了我很有感触。这种默默写博客的做法，就是我一直向往却没有做到的。非常敬佩，因为博主在努力构建自己的精神世界，和庞大的信息世界做对抗。
我看过一篇文章，说每个人对不同的媒介有不同的接受度。有的人能从图像中看到丰富的信息，有的人在视频中最容易学新知识，有的人对文字的处理速度很高。有的人在做vlog，有的人还在坚持写博客。在我心里文字是最简朴，也是最丰富的。
这个博主，很令人敬佩的另一个原因是，他毕业后在RStudio工作，8年了还没换工作呢。我们行业的人都挺浮躁的，因为大家都想去知名度更高的公司，报酬更高的公司，“跳来跳去“被认为是升职加薪的关键，但是也有一些人让人看到他们的内驱力是”做好事情“。
我要向这种做法学习，不要那么浮躁。
下班后也和一个同事聊了聊。我问他经常要学习新的东西，不会感到厌倦吗？他说要保持竞争力，学习是必须的。而且什么框架不重要，重要的是弄清楚框架的设计理念是什么，这个框架为什么这么受欢迎？它的优缺点在哪？重要的是可以把写代码当成爱好，这样就不会烦了。
我意识到我的做法是有问题的，我想着学完那个教程，我就会了。学的过程中我内心不断在念叨，”还有7个部分没学“，”好的，这章过了“。唉，我干嘛要这样啊，现在又不用考试要求面面俱到。
如果带着好奇心去学的话，那就是，”有了这个功能，我还想加点需求，那么又该怎么实现呢“，”为什么这么设计呢，和Flask又有什么不同哇“，这样用好奇心驱动的话，收获的应该是好奇心得到满足的永不厌倦吧。</description>
    </item>
    
    <item>
      <title>2022-02-18 做NLP基础不牢的痛苦</title>
      <link>https://huizhixu.github.io/post/20220218%E5%81%9Anlp%E7%9A%84%E7%97%9B%E8%8B%A6/</link>
      <pubDate>Fri, 18 Feb 2022 20:07:58 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220218%E5%81%9Anlp%E7%9A%84%E7%97%9B%E8%8B%A6/</guid>
      <description>做NLP太痛苦了，不知其然，也不知其所以然。这就是我的体会。</description>
    </item>
    
    <item>
      <title>2022-01-10 开始对拍照感兴趣了</title>
      <link>https://huizhixu.github.io/post/20220110%E5%BC%80%E5%A7%8B%E5%AF%B9%E6%8B%8D%E7%85%A7%E6%84%9F%E5%85%B4%E8%B6%A3%E4%BA%86/</link>
      <pubDate>Mon, 10 Jan 2022 20:07:58 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220110%E5%BC%80%E5%A7%8B%E5%AF%B9%E6%8B%8D%E7%85%A7%E6%84%9F%E5%85%B4%E8%B6%A3%E4%BA%86/</guid>
      <description>从12月底，就开始对摄影产生了一点兴趣。这种兴趣的由来，其实是有迹可循的。来上海四个月，每个礼拜出门都是去商场吃饭，然后逛逛。时间久了，就觉得周末的生活很乏味，开始讨厌起逛商场来。</description>
    </item>
    
    <item>
      <title>2021-10-30 回国内卷</title>
      <link>https://huizhixu.github.io/post/20211031%E5%9B%9E%E5%9B%BD%E5%86%85%E5%8D%B7/</link>
      <pubDate>Sat, 30 Oct 2021 20:07:58 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20211031%E5%9B%9E%E5%9B%BD%E5%86%85%E5%8D%B7/</guid>
      <description>回国后，我如愿以偿的成为了一名又苦又累的Python后端开发工程师。一眨眼，入职已经两个多月了。我只能说，路是自己选的，苦也是自己选的，人生无非是苦中作乐。</description>
    </item>
    
  </channel>
</rss>
