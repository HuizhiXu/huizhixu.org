<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on 徐慧志的个人博客</title><link>https://huizhixu.github.io/chs/tags/tech/</link><description>Recent content in Tech on 徐慧志的个人博客</description><generator>Hugo</generator><language>chs</language><lastBuildDate>Mon, 16 Jun 2025 13:45:38 +0000</lastBuildDate><atom:link href="https://huizhixu.github.io/chs/tags/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Weaviate使用（四） RAG的两种处理方法</title><link>https://huizhixu.github.io/chs/know_how/20250616weaviate%E4%BD%BF%E7%94%A8_rag%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 16 Jun 2025 13:45:38 +0000</pubDate><guid>https://huizhixu.github.io/chs/know_how/20250616weaviate%E4%BD%BF%E7%94%A8_rag%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</guid><description>&lt;p>执行RAG操作过程中，对检索到的条目有两种处理方法：一种是single_prompt，另一种是grouped_tasks。&lt;/p>
&lt;p>grouped_task是对所有检索到的条目做一个整体的处理，例如&amp;quot;write a tweet about these facts&amp;quot;， &amp;ldquo;what do these movies have in common?&amp;quot;。&lt;/p>
&lt;p>single_prompt是对每一个检索到的object应用prompt。例如&amp;quot;translate this into French:{title}&amp;quot;。&lt;/p>
&lt;h2 id="single-prompt">Single prompt&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Single prompt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response &lt;span style="color:#ff79c6">=&lt;/span> movies&lt;span style="color:#ff79c6">.&lt;/span>generate&lt;span style="color:#ff79c6">.&lt;/span>near_vector(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> near_vector&lt;span style="color:#ff79c6">=&lt;/span>query_vector,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> limit&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> single_prompt &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Translate this into French:&lt;/span>&lt;span style="color:#f1fa8c">{title}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">for&lt;/span> o &lt;span style="color:#ff79c6">in&lt;/span> response&lt;span style="color:#ff79c6">.&lt;/span>objects:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(o&lt;span style="color:#ff79c6">.&lt;/span>properties[&lt;span style="color:#f1fa8c">&amp;#34;title&amp;#34;&lt;/span>]) &lt;span style="color:#6272a4"># Print the title&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(o&lt;span style="color:#ff79c6">.&lt;/span>generated) &lt;span style="color:#6272a4"># Print the generated text (the title, in French)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>I, Robot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The translation of &lt;span style="color:#f1fa8c">&amp;#34;I, Robot&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">in&lt;/span> French &lt;span style="color:#ff79c6">is&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Je, robot&lt;span style="color:#ff79c6">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Looper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The word &lt;span style="color:#f1fa8c">&amp;#34;Looper&amp;#34;&lt;/span> translates to &lt;span style="color:#f1fa8c">&amp;#34;Loupé&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">in&lt;/span> French&lt;span style="color:#ff79c6">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看结果，找出来两个数据”I, Robot”和”Looper”，并且分别翻译成法语。&lt;/p></description></item><item><title>Weaviate使用（三） 两种导入数据的方法</title><link>https://huizhixu.github.io/chs/know_how/20250615weaviate%E4%BD%BF%E7%94%A8_%E4%B8%A4%E7%A7%8D%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Sun, 15 Jun 2025 13:45:39 +0000</pubDate><guid>https://huizhixu.github.io/chs/know_how/20250615weaviate%E4%BD%BF%E7%94%A8_%E4%B8%A4%E7%A7%8D%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>&lt;p>在导入的时候，可以先生成embedding，写入csv，然后在add_batch的时候添加。另外一种方法是在导入的时候直接embedding。&lt;/p>
&lt;h2 id="第一种方法">第一种方法&lt;/h2>
&lt;h3 id="先创建集合create-collection">先创建集合：Create collection&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> weaviate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> weaviate.classes.config &lt;span style="color:#ff79c6">as&lt;/span> wc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">from&lt;/span> weaviate.classes.config &lt;span style="color:#ff79c6">import&lt;/span> Configure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client &lt;span style="color:#ff79c6">=&lt;/span> weaviate&lt;span style="color:#ff79c6">.&lt;/span>connect_to_local()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># client.collections.delete(&amp;#34;MovieCustomVector&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client&lt;span style="color:#ff79c6">.&lt;/span>collections&lt;span style="color:#ff79c6">.&lt;/span>create(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;MovieCustomVector&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties&lt;span style="color:#ff79c6">=&lt;/span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wc&lt;span style="color:#ff79c6">.&lt;/span>Property(name&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;title&amp;#34;&lt;/span>, data_type&lt;span style="color:#ff79c6">=&lt;/span>wc&lt;span style="color:#ff79c6">.&lt;/span>DataType&lt;span style="color:#ff79c6">.&lt;/span>TEXT),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wc&lt;span style="color:#ff79c6">.&lt;/span>Property(name&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;overview&amp;#34;&lt;/span>, data_type&lt;span style="color:#ff79c6">=&lt;/span>wc&lt;span style="color:#ff79c6">.&lt;/span>DataType&lt;span style="color:#ff79c6">.&lt;/span>TEXT),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wc&lt;span style="color:#ff79c6">.&lt;/span>Property(name&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;vote_average&amp;#34;&lt;/span>, data_type&lt;span style="color:#ff79c6">=&lt;/span>wc&lt;span style="color:#ff79c6">.&lt;/span>DataType&lt;span style="color:#ff79c6">.&lt;/span>NUMBER),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wc&lt;span style="color:#ff79c6">.&lt;/span>Property(name&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;genre_ids&amp;#34;&lt;/span>, data_type&lt;span style="color:#ff79c6">=&lt;/span>wc&lt;span style="color:#ff79c6">.&lt;/span>DataType&lt;span style="color:#ff79c6">.&lt;/span>INT_ARRAY),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wc&lt;span style="color:#ff79c6">.&lt;/span>Property(name&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;release_date&amp;#34;&lt;/span>, data_type&lt;span style="color:#ff79c6">=&lt;/span>wc&lt;span style="color:#ff79c6">.&lt;/span>DataType&lt;span style="color:#ff79c6">.&lt;/span>DATE),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wc&lt;span style="color:#ff79c6">.&lt;/span>Property(name&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;tmdb_id&amp;#34;&lt;/span>, data_type&lt;span style="color:#ff79c6">=&lt;/span>wc&lt;span style="color:#ff79c6">.&lt;/span>DataType&lt;span style="color:#ff79c6">.&lt;/span>INT),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vectorizer_config&lt;span style="color:#ff79c6">=&lt;/span>Configure&lt;span style="color:#ff79c6">.&lt;/span>Vectorizer&lt;span style="color:#ff79c6">.&lt;/span>none(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generative_config&lt;span style="color:#ff79c6">=&lt;/span>Configure&lt;span style="color:#ff79c6">.&lt;/span>Generative&lt;span style="color:#ff79c6">.&lt;/span>ollama(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api_endpoint&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;http://host.docker.internal:11434&amp;#34;&lt;/span>, model&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;llama3.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client&lt;span style="color:#ff79c6">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="对文本向量化和存储embed_text">对文本向量化和存储：embed_text&lt;/h3>
&lt;p>这一步组合标题和概述的内容作为要向量化的文本，向量化之后存为csv。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> pandas &lt;span style="color:#ff79c6">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">from&lt;/span> FlagEmbedding &lt;span style="color:#ff79c6">import&lt;/span> BGEM3FlagModel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">generate_embeddings&lt;/span>(df: pd&lt;span style="color:#ff79c6">.&lt;/span>DataFrame, batch_size: &lt;span style="color:#8be9fd;font-style:italic">int&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">50&lt;/span>) &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> pd&lt;span style="color:#ff79c6">.&lt;/span>DataFrame:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&amp;#34;生成文本的向量表示
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> df: 包含电影数据的DataFrame
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> batch_size: 批处理大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> DataFrame: 包含所有embeddings的DataFrame
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model &lt;span style="color:#ff79c6">=&lt;/span> BGEM3FlagModel(&lt;span style="color:#f1fa8c">&amp;#34;BAAI/bge-m3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> emb_dfs &lt;span style="color:#ff79c6">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src_texts &lt;span style="color:#ff79c6">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> indices &lt;span style="color:#ff79c6">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># 批量处理文本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i, row &lt;span style="color:#ff79c6">in&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">enumerate&lt;/span>(df&lt;span style="color:#ff79c6">.&lt;/span>itertuples(index&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#ff79c6">False&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># 组合标题和概述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">f&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Title: &lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>row&lt;span style="color:#ff79c6">.&lt;/span>title&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">;Overview: &lt;/span>&lt;span style="color:#f1fa8c">{&lt;/span>row&lt;span style="color:#ff79c6">.&lt;/span>overview&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src_texts&lt;span style="color:#ff79c6">.&lt;/span>append(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> indices&lt;span style="color:#ff79c6">.&lt;/span>append(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># 达到批处理大小或处理完所有数据时进行向量化&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">len&lt;/span>(src_texts) &lt;span style="color:#ff79c6">==&lt;/span> batch_size &lt;span style="color:#ff79c6">or&lt;/span> i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">len&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embeddings &lt;span style="color:#ff79c6">=&lt;/span> model&lt;span style="color:#ff79c6">.&lt;/span>encode(src_texts)[&lt;span style="color:#f1fa8c">&amp;#34;dense_vecs&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> emb_df &lt;span style="color:#ff79c6">=&lt;/span> pd&lt;span style="color:#ff79c6">.&lt;/span>DataFrame(embeddings, index&lt;span style="color:#ff79c6">=&lt;/span>indices)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> emb_dfs&lt;span style="color:#ff79c6">.&lt;/span>append(emb_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src_texts &lt;span style="color:#ff79c6">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> indices &lt;span style="color:#ff79c6">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> pd&lt;span style="color:#ff79c6">.&lt;/span>concat(emb_dfs)&lt;span style="color:#ff79c6">.&lt;/span>sort_index()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&amp;#34;主函数，处理电影数据并生成向量&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># 读取数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data_path &lt;span style="color:#ff79c6">=&lt;/span> os&lt;span style="color:#ff79c6">.&lt;/span>path&lt;span style="color:#ff79c6">.&lt;/span>join(os&lt;span style="color:#ff79c6">.&lt;/span>path&lt;span style="color:#ff79c6">.&lt;/span>dirname(__file__), &lt;span style="color:#f1fa8c">&amp;#34;scratch/movies_data_1990_2024.json&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#ff79c6">=&lt;/span> pd&lt;span style="color:#ff79c6">.&lt;/span>read_json(data_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># 生成向量并保存&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embeddings_df &lt;span style="color:#ff79c6">=&lt;/span> generate_embeddings(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> os&lt;span style="color:#ff79c6">.&lt;/span>makedirs(&lt;span style="color:#f1fa8c">&amp;#34;scratch&amp;#34;&lt;/span>, exist_ok&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#ff79c6">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embeddings_df&lt;span style="color:#ff79c6">.&lt;/span>to_csv(&lt;span style="color:#f1fa8c">&amp;#34;scratch/movies_data_1990_2024_embeddings.csv&amp;#34;&lt;/span>, index&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#ff79c6">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> __name__ &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="导入数据import-data">导入数据：Import data&lt;/h3>
&lt;p>在导入数据(batch.add_object)的时候需要把 vector和property分别写入。另外uuid是数据库为每一条数据创建的不重复的id。&lt;/p></description></item><item><title>Weaviate使用（二） 使用自定义模型</title><link>https://huizhixu.github.io/chs/know_how/20250614weaviate%E4%BD%BF%E7%94%A8_%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%A7%E6%A8%A1%E5%9E%8B/</link><pubDate>Sat, 14 Jun 2025 13:45:40 +0000</pubDate><guid>https://huizhixu.github.io/chs/know_how/20250614weaviate%E4%BD%BF%E7%94%A8_%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%A7%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>如果不想用Ollama启用的向量模型，想用自定义的模型有多种方法，下面介绍两种：一种是通过huggingface或者其他的框架导入，另一种是直接调用已有的向量调用的服务（例如用FastAPI启动）。&lt;/p>
&lt;p>把向量服务或者大模型封装成服务的好处是：&lt;/p>
&lt;ol>
&lt;li>功能解耦：大模型服务或者向量服务独立出来，在替换的时候无需更改代码&lt;/li>
&lt;li>环境解耦：大模型服务通常需要更多的资源。&lt;/li>
&lt;/ol>
&lt;p>这时的docker compose file 非常简单，不再需要ENABLE_MODULES: &amp;rsquo;text2vec-ollama,generative-ollama&amp;rsquo; 这一行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>services&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> weaviate&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#ff79c6">--&lt;/span>host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">0.0&lt;/span>.&lt;span style="color:#bd93f9">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#ff79c6">--&lt;/span>port
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;8080&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#ff79c6">--&lt;/span>scheme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image&lt;span style="color:#ff79c6">:&lt;/span> cr.weaviate.io&lt;span style="color:#ff79c6">/&lt;/span>semitechnologies&lt;span style="color:#ff79c6">/&lt;/span>weaviate&lt;span style="color:#ff79c6">:&lt;/span>&lt;span style="color:#bd93f9">1.30&lt;/span>.&lt;span style="color:#bd93f9">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ports&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">8080&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>&lt;span style="color:#bd93f9">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">50051&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>&lt;span style="color:#bd93f9">50051&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumes&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> weaviate_data&lt;span style="color:#ff79c6">:&lt;/span>/var/lib/weaviate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> restart&lt;span style="color:#ff79c6">:&lt;/span> on&lt;span style="color:#ff79c6">-&lt;/span>failure&lt;span style="color:#ff79c6">:&lt;/span>&lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environment&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> QUERY_DEFAULTS_LIMIT&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#bd93f9">25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;true&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PERSISTENCE_DATA_PATH&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;/var/lib/weaviate&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENABLE_API_BASED_MODULES&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;true&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CLUSTER_HOSTNAME&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;node1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>volumes&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> weaviate_data&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="通过hugging-face导入">通过hugging face导入&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>def vectorize(texts&lt;span style="color:#ff79c6">:&lt;/span> List[str])&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> from FlagEmbedding &lt;span style="color:#ff79c6">import&lt;/span> BGEM3FlagModel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model &lt;span style="color:#ff79c6">=&lt;/span> BGEM3FlagModel(&lt;span style="color:#f1fa8c">&amp;#39;BAAI/bge-m3&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embeddings &lt;span style="color:#ff79c6">=&lt;/span> model.encode(texts)[&lt;span style="color:#f1fa8c">&amp;#34;dense_vecs&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> embeddings
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="通过api调用">通过API调用&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> CustomEmbedding(EmbedGen)&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> def generate_embeddings(self, texts&lt;span style="color:#ff79c6">:&lt;/span> List[str]) &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> np.array&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">import&lt;/span> json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#ff79c6">=&lt;/span> json.dumps(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;input&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> texts,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#ff79c6">=&lt;/span> {&lt;span style="color:#f1fa8c">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;application/json&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#ff79c6">=&lt;/span> requests.request(&lt;span style="color:#f1fa8c">&amp;#34;POST&amp;#34;&lt;/span>, url&lt;span style="color:#ff79c6">=&lt;/span>EMBED_URL, headers&lt;span style="color:#ff79c6">=&lt;/span>headers, data&lt;span style="color:#ff79c6">=&lt;/span>payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embeddings &lt;span style="color:#ff79c6">=&lt;/span> [i[&lt;span style="color:#f1fa8c">&amp;#34;embedding&amp;#34;&lt;/span>] &lt;span style="color:#ff79c6">for&lt;/span> i &lt;span style="color:#ff79c6">in&lt;/span> response.json()[&lt;span style="color:#f1fa8c">&amp;#34;data&amp;#34;&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embeddings &lt;span style="color:#ff79c6">=&lt;/span> np.array(embeddings)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> embeddings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>论文阅读BGE-M3</title><link>https://huizhixu.github.io/chs/know_how/20250613%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BBbge-m3/</link><pubDate>Fri, 13 Jun 2025 13:45:40 +0000</pubDate><guid>https://huizhixu.github.io/chs/know_how/20250613%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BBbge-m3/</guid><description>&lt;p>论文地址：https://arxiv.org/abs/2402.03216&lt;/p>
&lt;p>M3的意思是 Multi-Linguality, Multi-Functionality和Multi-Granularity&lt;/p>
&lt;ul>
&lt;li>支持100种语言（multi-lingual, cross-lingual)&lt;/li>
&lt;li>支持短句和长文档，最高到8192tokesn&lt;/li>
&lt;li>支持不同的检索方法&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/HuizhiXu/pictures/master/20250613/d5b741c9.png">&lt;/p>
&lt;p>(图来源于论文)&lt;/p>
&lt;h1 id="contribution">Contribution&lt;/h1>
&lt;ol>
&lt;li>实现了自知识蒸馏，将来自不同检索功能的相关性分数集成到教师信号，从而提高训练质量。&lt;/li>
&lt;li>优化了批处理策略，实现较大的批处理大小和高训练吞吐量，以提高Embedding的区分能力。&lt;/li>
&lt;li>用data curation来得到高质量的数据&lt;/li>
&lt;/ol>
&lt;h1 id="细节">细节&lt;/h1>
&lt;h2 id="不同的向量检索方法">不同的向量检索方法&lt;/h2>
&lt;ul>
&lt;li>[CLS]用来做dense retrieval&lt;/li>
&lt;li>其他token的向量用来做sparse retrieval 和multi-vector retrieval&lt;/li>
&lt;/ul>
&lt;h2 id="dataset-sources">Dataset sources&lt;/h2>
&lt;ul>
&lt;li>extract the unsupervised data from massive multi-lingual corpora&lt;/li>
&lt;li>Integrate the closely related supervised data&lt;/li>
&lt;li>Synthesize the scarce data&lt;/li>
&lt;/ul>
&lt;h2 id="self-knowledge-distillation">Self-Knowledge Distillation&lt;/h2>
&lt;p>InfoNCE loss 的目标是最大化正样本对的相似度，同时最小化负样本对的相似度。&lt;/p>
&lt;p>InfoNCE loss的计算&lt;/p>
&lt;p>$$Loss= -log \frac{ \exp(sim(x_i,x_i^+)/\tau) }{\sum_{j=1}^K \exp(sim(x_i, x_i^{-j})/\tau) }$$&lt;/p>
&lt;p>假设我们有一个数据集，其中每个样本 xi 有一个对应的正样本 $$x_i^+$$ 和多个负样本 $$x_i^{-1}, x_i^{-2}, &amp;hellip;, x_i^{-K} $$。&lt;/p>
&lt;p>对于每个样本 $$x_i$$，我们希望其与正样本 $$x_i^+ $$的相似度尽可能高。&lt;/p></description></item><item><title>Weaviate使用（一） 使用ollama启用大模型和向量模型</title><link>https://huizhixu.github.io/chs/know_how/20250612weaviate%E4%BD%BF%E7%94%A8_%E4%BD%BF%E7%94%A8ollama%E5%90%AF%E7%94%A8%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%90%91%E9%87%8F%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 12 Jun 2025 13:45:42 +0000</pubDate><guid>https://huizhixu.github.io/chs/know_how/20250612weaviate%E4%BD%BF%E7%94%A8_%E4%BD%BF%E7%94%A8ollama%E5%90%AF%E7%94%A8%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%90%91%E9%87%8F%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h2 id="先决条件">先决条件&lt;/h2>
&lt;p>在本地用docker-compose.yml部署Weaviate。因为使用Ollama来启动模型，所以在配置文件中要加上ENABLE_MODULES: &amp;rsquo;text2vec-ollama,generative-ollama'&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>services&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> weaviate&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#ff79c6">--&lt;/span>host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">0.0&lt;/span>.&lt;span style="color:#bd93f9">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#ff79c6">--&lt;/span>port
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;8080&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#ff79c6">--&lt;/span>scheme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image&lt;span style="color:#ff79c6">:&lt;/span> cr.weaviate.io&lt;span style="color:#ff79c6">/&lt;/span>semitechnologies&lt;span style="color:#ff79c6">/&lt;/span>weaviate&lt;span style="color:#ff79c6">:&lt;/span>&lt;span style="color:#bd93f9">1.30&lt;/span>.&lt;span style="color:#bd93f9">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ports&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">8080&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>&lt;span style="color:#bd93f9">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">50051&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>&lt;span style="color:#bd93f9">50051&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumes&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span> weaviate_data&lt;span style="color:#ff79c6">:&lt;/span>/var/lib/weaviate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> restart&lt;span style="color:#ff79c6">:&lt;/span> on&lt;span style="color:#ff79c6">-&lt;/span>failure&lt;span style="color:#ff79c6">:&lt;/span>&lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environment&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> QUERY_DEFAULTS_LIMIT&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#bd93f9">25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;true&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PERSISTENCE_DATA_PATH&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;/var/lib/weaviate&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENABLE_API_BASED_MODULES&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;true&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENABLE_MODULES&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;text2vec-ollama,generative-ollama&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CLUSTER_HOSTNAME&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;node1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>volumes&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> weaviate_data&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在本地安装启动Weaviate之后，运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> weaviate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client &lt;span style="color:#ff79c6">=&lt;/span> weaviate.connect_to_local()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(client.is_ready())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>True表示这个数据库是可用的。&lt;/p>
&lt;h2 id="准备数据">准备数据&lt;/h2>
&lt;p>下面是jeopardy_tiny.json的例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Category&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;SCIENCE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Question&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;This organ removes excess glucose from the blood &amp;amp; stores it as glycogen&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Answer&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Liver&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Category&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;ANIMALS&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Question&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;It&amp;#39;s the only living mammal in the order Proboseidea&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Answer&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Elephant&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Category&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;ANIMALS&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Question&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;The gavial looks very much like a crocodile except for this bodily feature&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Answer&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;the nose or snout&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建collection">创建collection&lt;/h2>
&lt;p>Ollama启动服务，api_endpoint统一为http://host.docker.internal:11434，模型根据模型名填写。&lt;/p></description></item><item><title>用大模型理解爆火的KAN网络</title><link>https://huizhixu.github.io/chs/know_how/20240525kan_basic/</link><pubDate>Sat, 25 May 2024 16:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240525kan_basic/</guid><description>&lt;p>五一假期的时候，KAN突然成为了热门话题。虽然最初我并没有计划弄懂它，但在老板的要求下，我还是探索了一下。&lt;/p>
&lt;h2 id="一kan是什么">一、KAN是什么？&lt;/h2>
&lt;p>&lt;strong>Kolmogorov-Arnold 定理是数学领域的一个里程碑，它揭示了多元函数能够通过一组更简单的函数来近似表示的原理。&lt;/strong> 在神经网络的研究领域，来自 MIT 的杰出研究者 Ziming Liu 将这一定理巧妙地融入，提出了创新的 KANs（&lt;strong>Kolmogorov-Arnold Networks&lt;/strong>）概念。（GitHub地址：https://github.com/KindXiaoming/pykan）。&lt;/p></description></item><item><title>大型语言模型在「想」什么呢？ — 浅谈大型语言模型的可解释性</title><link>https://huizhixu.github.io/chs/know_how/20240513explainable_llm/</link><pubDate>Mon, 13 May 2024 19:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240513explainable_llm/</guid><description>&lt;p>Explainable 和 Interpretable的区别：&lt;/p>
&lt;p>Explainable： 事物本身是黑箱，我们尝试去解释它的行为或输出。&lt;/p>
&lt;p>Interpretable： 事物本身不是黑箱，其工作原理是清晰和可以理解的。&lt;/p></description></item><item><title>用大语言模型打造AI Agent</title><link>https://huizhixu.github.io/chs/know_how/20240421ai_agent/</link><pubDate>Mon, 22 Apr 2024 23:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240421ai_agent/</guid><description>&lt;p>人类需要的不仅仅是大模型，而是能做复杂的多步骤的任务的大模型，Agent因此诞生了。&lt;/p>
&lt;h1 id="知名的ai-agent">知名的AI Agent&lt;/h1>
&lt;p>&lt;strong>1. AutoGPT: &lt;a href="https://github.com/Significant-Gravitas/AutoGPT" target="_blank" rel="noopener">https://github.com/Significant-Gravitas/AutoGPT&lt;/a>
&lt;/strong>&lt;/p>
&lt;p>AutoGPT是一个由Significant Gravitas开发的开源项目,旨在创建一个自主的AI代理,能够持续地学习、成长并完成各种任务。&lt;/p></description></item><item><title>让AI村民组成虚拟村庄会发生什么事</title><link>https://huizhixu.github.io/chs/know_how/20240414ai_virtual_town/</link><pubDate>Sun, 14 Apr 2024 19:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240414ai_virtual_town/</guid><description>&lt;p>去年Agent很火的时候，就知道有斯坦福出的这个虚拟小镇的论文了，当时大家都很好奇，怎么能够让大语言模型来操纵agent做出非常复杂的行为呢？&lt;/p></description></item><item><title>大型语言模型修炼史(第三阶段)</title><link>https://huizhixu.github.io/chs/know_how/20240413the-history-of-cultivating-llm_second_part/</link><pubDate>Sat, 13 Apr 2024 19:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240413the-history-of-cultivating-llm_second_part/</guid><description>&lt;h1 id="第三阶段参与实战打磨技巧">第三阶段：参与实战，打磨技巧&lt;/h1>
&lt;p>如何克服第二阶段的局限性呢？&lt;/p>
&lt;p>&lt;strong>关键是用第一阶段的参数作为初始参数。&lt;/strong>&lt;/p>
&lt;p>（贝叶斯定理这不就来了嘛！）&lt;/p>
&lt;p>所以第三阶段是由第一阶段和第二阶段组合而成的：&lt;/p>
&lt;p>第一阶段：通过网络上任何语料学习而来的，叫做预训练Pretrain&lt;/p></description></item><item><title>大型语言模型修炼史（第一、二阶段）</title><link>https://huizhixu.github.io/chs/know_how/20240405the-history-of-cultivating-llm/</link><pubDate>Fri, 05 Apr 2024 20:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240405the-history-of-cultivating-llm/</guid><description>&lt;h1 id="背景知识">背景知识&lt;/h1>
&lt;p>大模型的本质是文字接龙。输入一个未完成的句子，输出这个未完成的句子的下一个token。&lt;/p>
&lt;p>大模型可以看成是一个函数。$$ f(未完成的句子)= 下一个token $$这个函数是一个有数十亿个未知参数的函数。&lt;/p></description></item><item><title>改进量的期望 Expected Improvement</title><link>https://huizhixu.github.io/chs/know_how/20240305expected-improvement/</link><pubDate>Tue, 05 Mar 2024 20:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240305expected-improvement/</guid><description>&lt;p>在看正文之前，先复习一下期望（Expectation）：&lt;/p>
&lt;p>在统计学和概率论中，期望是一个衡量随机变量取值的中心趋势的指标。&lt;/p>
&lt;p>对于一个连续随机变量&lt;em>X&lt;/em>，其期望值可以通过以下公式计算：&lt;/p></description></item><item><title>Bayesian Optimization</title><link>https://huizhixu.github.io/chs/know_how/20240203%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 03 Feb 2024 17:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240203%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%98%E5%8C%96/</guid><description>&lt;p>贝叶斯优化有重要的两步步：&lt;/p>
&lt;ol>
&lt;li>构造代理模型（surrogate model）&lt;/li>
&lt;li>由获取函数（acquisition function）来生成采样建议&lt;/li>
&lt;/ol>
&lt;p>贝叶斯优化中，因为不知道目标函数的closed-form，所以需要构造一个代理模型（surrogate model）来近似目标函数。记住，代理模型对目标函数的潜在分布进行建模。通常用gaussian process来作为代理模型，也可以用random forest来作为代理模型。（任何模型，只要它为函数提供后验估计，可以用来作为surrogate model）。&lt;/p></description></item><item><title>grobid的使用</title><link>https://huizhixu.github.io/chs/know_how/20240222grobid%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 03 Feb 2024 17:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20240222grobid%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>最近被文本分块虐得不轻，看到有人介绍grobid，赶紧用上了。&lt;/p>
&lt;h3 id="1-grobid-介绍">1. Grobid 介绍&lt;/h3>
&lt;p>Grobid 的全称是Generation of Bibliographic Data。它用机器学习来解析、提取文档。&lt;/p></description></item><item><title>Gaussian Process Regression with GPyTorch</title><link>https://huizhixu.github.io/chs/know_how/20231217gaussian_process_regression_gpytorch/</link><pubDate>Sun, 17 Dec 2023 17:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20231217gaussian_process_regression_gpytorch/</guid><description>&lt;p>这个例子主要是利用GPytorch，来实现高斯过程回归。&lt;/p>
&lt;h1 id="计算mean">计算Mean&lt;/h1>
&lt;ol>
&lt;li>zero mean function &lt;code>gpytorch.means.ZeroMean()&lt;/code>&lt;/li>
&lt;li>constant mean function &lt;code>gpytorch.means.ConstantMean()&lt;/code>&lt;/li>
&lt;li>linear mean function &lt;code>gpytorch.means.LinearMean()&lt;/code>&lt;/li>
&lt;/ol>
&lt;h1 id="计算covariance">计算Covariance&lt;/h1>
&lt;ol>
&lt;li>RBFKernel &lt;code>gpytorch.kernels.RBFKernel()&lt;/code>&lt;/li>
&lt;li>adding a scaling coefficient: &lt;code>kernels.ScaleKernel(gpytorch.kernels.RBFKernel())&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>一般会在核函数的输出上添加缩放系数。&lt;/p>
&lt;p>在核函数的输出上添加缩放系数是为了调整核函数的影响力。&lt;/p></description></item><item><title>Gaussian Process in Practice 高斯过程实践</title><link>https://huizhixu.github.io/chs/know_how/20231210gaussian_process_in_practice/</link><pubDate>Sun, 10 Dec 2023 18:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20231210gaussian_process_in_practice/</guid><description>&lt;p>这个例子主要是利用高斯过程的先验分布，将样本绘制成曲线。然后更新参数，利用后验分布获得新的曲线。&lt;/p>
&lt;h2 id="1-先验分布">1. 先验分布&lt;/h2>
&lt;h4 id="11-多变量高斯分布">1.1 多变量高斯分布&lt;/h4>
&lt;ul>
&lt;li>创建一个包含n个候选输入位置的列表${x_i，i=1,&amp;hellip;,n}$&lt;/li>
&lt;li>初始化均值向量μ和协方差矩阵K（含n x n个元素）
&lt;ul>
&lt;li>假设x_1和x_2是多维的矩阵。x_1是一个 m* d的矩阵，x_2是一个n&lt;em>d的矩阵，那么K是一个m&lt;/em>n的矩阵，$K[i,j] = k(x_1[i,:], x_2[j,:])$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>执行Cholesky分解K=LL T来获得L&lt;/li>
&lt;li>通过LN（0,I）获得N（0,K）上的一个样本并存储在f_prior中&lt;/li>
&lt;/ul>
&lt;p>multivariante_samples01 和multivariante_samples02 这两个function的作用是一样的，只不过有两种写法。&lt;/p></description></item><item><title>Kernel Function 核函数</title><link>https://huizhixu.github.io/chs/know_how/20231207kernel_function/</link><pubDate>Thu, 07 Dec 2023 18:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20231207kernel_function/</guid><description>&lt;p>这篇文章主要解决三个问题：&lt;/p>
&lt;ol>
&lt;li>正态分布的表示&lt;/li>
&lt;li>核函数是什么，有什么类型&lt;/li>
&lt;li>已知先验知识，如何计算后验分布&lt;/li>
&lt;/ol>
&lt;h2 id="1-正态分布的表示">1. 正态分布的表示&lt;/h2>
&lt;p>正态分布一般表示为$f \sim N(0,K)$，书上写作 $p(f|x) = N(f|0,K)$。&lt;/p></description></item><item><title>书籍 Bayesian Optimization Theory and Practice using Python 之Gaussian Process</title><link>https://huizhixu.github.io/chs/know_how/20231125gaussian_process/</link><pubDate>Sat, 25 Nov 2023 18:01:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20231125gaussian_process/</guid><description>&lt;h2 id="1-理解covariance-matrix">1. 理解covariance matrix&lt;/h2>
&lt;p>Gaussian Process is a stochastic process used to characterize the distribution over function.&lt;/p>
&lt;p>GP将一组有限的参数theta从一个连空间拓展到一个连续无限空间的一个无限函数f。&lt;/p>
&lt;p>假设我们有两个变量，X1和X2，它俩符合multivariate Gaussian distribution。&lt;/p></description></item><item><title>论文 Uncertainty Quantification in Machine Learning for Engineering Design and Health Prognostics</title><link>https://huizhixu.github.io/chs/know_how/20231120uncertainty/</link><pubDate>Mon, 20 Nov 2023 18:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20231120uncertainty/</guid><description>&lt;p>Abstract&lt;/p>
&lt;ul>
&lt;li>types
&lt;ul>
&lt;li>第一种分类
&lt;ul>
&lt;li>data uncertainty (measurement noise)&lt;/li>
&lt;li>model uncertainty ( limited data)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第二种分类
&lt;ul>
&lt;li>epistemic uncertainty
&lt;ul>
&lt;li>认知上的不确定性，通常是由于没有足够的知识（数据）而产生&lt;/li>
&lt;li>can be reducible&lt;/li>
&lt;li>分为两类
&lt;ul>
&lt;li>model-form uncertainty
&lt;ul>
&lt;li>由于模型的选择导致，例如architectures, activation functions or kernel functions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>parameter uncertainty
&lt;ul>
&lt;li>在训练过程产生，由于数据不够导致&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>aleatory uncertainty
&lt;ul>
&lt;li>stems from physical systems, 具有随机性, cannot be reducible&lt;/li>
&lt;li>e.g. noises&lt;/li>
&lt;li>这种类型的不确定性在ML模型里面被看成是似然函数的一部分(a part of the likelihood function)&lt;/li>
&lt;li>也被叫做data uncertainty&lt;/li>
&lt;li>捕捉这种不确定性的方式有：同方差 homoscedastic和异方差 heteroscedastic&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>例子：
&lt;ul>
&lt;li>test data和train data不同分布：epistemic uncertainty (model performs poorer in extrapolation than in interpolation)&lt;/li>
&lt;li>测量数据由仪器导致的误差是aleatory Unc， 大试如果由于精度原因导致，则属于epistemic unc，因为提高精度可以减少这个误差&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>causes&lt;/li>
&lt;li>methods:
&lt;ul>
&lt;li>Gaussian process regression
&lt;ul>
&lt;li>a ML method with UQ capability&lt;/li>
&lt;li>一般不用来quantify uncertainty of a final surrogate&lt;/li>
&lt;li>一般用来在高度不确定的采样空间里采样，来减少训练样本的数量
&lt;ul>
&lt;li>to build an accurate surrogate within some lower and upper bounds of input variables&lt;/li>
&lt;li>to find a globally optimally design for black-box objective function&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一般不评估GPR的UQ质量
&lt;ul>
&lt;li>因为预测一般在pre-defined design bounds&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bayesian neural network
&lt;ul>
&lt;li>Monte Carlo dropout as an alternative to traditional Bayesian neural network&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>neural network ensemble
&lt;ul>
&lt;li>neural network ensemble consisting of multiple neural networks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>deterministic UQ methods&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>metrics
&lt;ul>
&lt;li>classification
&lt;ul>
&lt;li>probability can be viewed as uncertainty&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>regression
&lt;ul>
&lt;li>confidence interval :
&lt;ul>
&lt;li>没看懂： prediction may be 120 ± 15, in weeks, which represents a two-sided 95% confidence interval (i.e.,∼1.96 standard deviations subtracted from or added to the mean estimate assuming the model-predicted RUL follows a Gaussian distribution).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>2023-07-20Redash V10安装（在Ubuntu系统上用docker部署安装）</title><link>https://huizhixu.github.io/chs/know_how/20230720redash%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</link><pubDate>Thu, 20 Jul 2023 18:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230720redash%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</guid><description>&lt;p>市面上的Redash教程太混乱了，官方发布了不同的安装方式，但是写得不是很明白。基本上都会有一个重复安装和卸载的过程，是正常的。&lt;/p>
&lt;p>这次安装的经验就是：&lt;/p></description></item><item><title>2023-07-19Ubuntu上安装Docker</title><link>https://huizhixu.github.io/chs/know_how/20230719ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85docker/</link><pubDate>Wed, 19 Jul 2023 18:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230719ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85docker/</guid><description>&lt;h1 id="一设置docker-repository">一、设置Docker Repository&lt;/h1>
&lt;ol>
&lt;li>升级&lt;code>apt-get&lt;/code>到最新&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sudo apt&lt;span style="color:#ff79c6">-&lt;/span>get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt&lt;span style="color:#ff79c6">-&lt;/span>get install ca&lt;span style="color:#ff79c6">-&lt;/span>certificates curl gnupg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>添加Docker的官方GPG key&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sudo install &lt;span style="color:#ff79c6">-&lt;/span>m &lt;span style="color:#bd93f9">0755&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>d &lt;span style="color:#ff79c6">/&lt;/span>etc&lt;span style="color:#ff79c6">/&lt;/span>apt&lt;span style="color:#ff79c6">/&lt;/span>keyrings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#ff79c6">-&lt;/span>fsSL https:&lt;span style="color:#ff79c6">//&lt;/span>download&lt;span style="color:#ff79c6">.&lt;/span>docker&lt;span style="color:#ff79c6">.&lt;/span>com&lt;span style="color:#ff79c6">/&lt;/span>linux&lt;span style="color:#ff79c6">/&lt;/span>ubuntu&lt;span style="color:#ff79c6">/&lt;/span>gpg &lt;span style="color:#ff79c6">|&lt;/span> sudo gpg &lt;span style="color:#ff79c6">--&lt;/span>dearmor &lt;span style="color:#ff79c6">-&lt;/span>o &lt;span style="color:#ff79c6">/&lt;/span>etc&lt;span style="color:#ff79c6">/&lt;/span>apt&lt;span style="color:#ff79c6">/&lt;/span>keyrings&lt;span style="color:#ff79c6">/&lt;/span>docker&lt;span style="color:#ff79c6">.&lt;/span>gpg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chmod a&lt;span style="color:#ff79c6">+&lt;/span>r &lt;span style="color:#ff79c6">/&lt;/span>etc&lt;span style="color:#ff79c6">/&lt;/span>apt&lt;span style="color:#ff79c6">/&lt;/span>keyrings&lt;span style="color:#ff79c6">/&lt;/span>docker&lt;span style="color:#ff79c6">.&lt;/span>gpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>设置仓库&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>echo \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;deb [arch=&amp;#34;&lt;/span>$(dpkg &lt;span style="color:#ff79c6">--&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>&lt;span style="color:#ff79c6">-&lt;/span>architecture)&lt;span style="color:#f1fa8c">&amp;#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu &lt;/span>&lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span>&lt;span style="color:#f1fa8c"> &amp;#34;&lt;/span>$(&lt;span style="color:#ff79c6">.&lt;/span> &lt;span style="color:#ff79c6">/&lt;/span>etc&lt;span style="color:#ff79c6">/&lt;/span>os&lt;span style="color:#ff79c6">-&lt;/span>release &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#f1fa8c">&amp;#34;$VERSION_CODENAME&amp;#34;&lt;/span>)&lt;span style="color:#f1fa8c">&amp;#34; stable&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">|&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudo tee &lt;span style="color:#ff79c6">/&lt;/span>etc&lt;span style="color:#ff79c6">/&lt;/span>apt&lt;span style="color:#ff79c6">/&lt;/span>sources&lt;span style="color:#ff79c6">.&lt;/span>list&lt;span style="color:#ff79c6">.&lt;/span>d&lt;span style="color:#ff79c6">/&lt;/span>docker&lt;span style="color:#ff79c6">.&lt;/span>list &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">/&lt;/span>dev&lt;span style="color:#ff79c6">/&lt;/span>null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="二安装docker-engine">二、安装Docker Engine&lt;/h1>
&lt;ol>
&lt;li>升级apt-get到最新&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sudo apt&lt;span style="color:#ff79c6">-&lt;/span>get update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>安装最新版本的Docker Engine， containerd和Docker Compose&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sudo apt&lt;span style="color:#ff79c6">-&lt;/span>get install docker&lt;span style="color:#ff79c6">-&lt;/span>ce docker&lt;span style="color:#ff79c6">-&lt;/span>ce&lt;span style="color:#ff79c6">-&lt;/span>cli containerd&lt;span style="color:#ff79c6">.&lt;/span>io docker&lt;span style="color:#ff79c6">-&lt;/span>buildx&lt;span style="color:#ff79c6">-&lt;/span>plugin docker&lt;span style="color:#ff79c6">-&lt;/span>compose&lt;span style="color:#ff79c6">-&lt;/span>plugin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>确保安装成功&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sudo docker run hello&lt;span style="color:#ff79c6">-&lt;/span>world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="三配置docker环境">三、配置Docker环境&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">#配置log文件大小&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo sh &lt;span style="color:#ff79c6">-&lt;/span>c &lt;span style="color:#f1fa8c">&amp;#39;mkdir /etc/docker &amp;amp;&amp;amp; cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt; EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;log-driver&amp;#34;&lt;/span>:&lt;span style="color:#f1fa8c">&amp;#34;json-file&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;log-opts&amp;#34;&lt;/span>:{ &lt;span style="color:#f1fa8c">&amp;#34;max-size&amp;#34;&lt;/span> :&lt;span style="color:#f1fa8c">&amp;#34;50m&amp;#34;&lt;/span>,&lt;span style="color:#f1fa8c">&amp;#34;max-file&amp;#34;&lt;/span>:&lt;span style="color:#f1fa8c">&amp;#34;3&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EOF&lt;span style="color:#f1fa8c">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">#将当前用户加入docker组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo usermod &lt;span style="color:#ff79c6">-&lt;/span>aG docker $USER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">#启动docker服务并配置自启&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start docker &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> sudo systemctl enable docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="四参考">四、参考&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">Docker官网安装&lt;/a>
&lt;/li>
&lt;/ol></description></item><item><title>2023-04-27GPU运行LLaMa模型——用HF的方式推理</title><link>https://huizhixu.github.io/chs/know_how/20230427gpu%E8%BF%90%E8%A1%8Cllama%E6%A8%A1%E5%9E%8Bhf%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 27 Apr 2023 18:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230427gpu%E8%BF%90%E8%A1%8Cllama%E6%A8%A1%E5%9E%8Bhf%E6%96%B9%E5%BC%8F/</guid><description>&lt;p>在GPU上运行中文LLaMa模型，主要是按照 &lt;a href="https://github.com/ymcui/Chinese-LLaMA-Alpaca" target="_blank" rel="noopener">https://github.com/ymcui/Chinese-LLaMA-Alpaca&lt;/a>
 这个仓库的方法。
中文LLaMa模型和中文Alpaca的区别是：中文LLaMa在英文llama的基础上扩充了中文词表并且使用了中文数据进行二次训练。中文LLaMa只能进行单轮问答。中文Alpaca经过instruct-tuning 生成，可以进行多轮问答。本次实验主要是针对中文LLaMa模型。&lt;/p></description></item><item><title>2023-03-05用随机梯度下降来优化人生【转载】</title><link>https://huizhixu.github.io/chs/know_how/20230305%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%9D%A5%E4%BC%98%E5%8C%96%E4%BA%BA%E7%94%9F/</link><pubDate>Sun, 05 Mar 2023 18:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230305%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%9D%A5%E4%BC%98%E5%8C%96%E4%BA%BA%E7%94%9F/</guid><description>&lt;h2 id="要有目标">要有目标。&lt;/h2>
&lt;p>你需要有目标。短的也好，长的也好。认真定下的也好，别人那里捡的也好。就跟随机梯度下降需要有个目标函数一样。&lt;/p>
&lt;h2 id="目标要大">目标要大。&lt;/h2>
&lt;p>不管是人生目标还是目标函数，你最好不要知道最后可以走到哪里。如果你知道，那么你的目标就太简单了，可能是个凸函数。你可以在一开始的时候给自己一些小目标，例如期末考个80分，训练一个线性模型。但接下来得有更大的目标，财富自由也好，100亿参数的变形金刚也好，得足够一颗赛艇。&lt;/p></description></item><item><title>2023-03-01我都用chatGPT干了啥</title><link>https://huizhixu.github.io/chs/know_how/20230301%E6%88%91%E9%83%BD%E7%94%A8chatgpt%E5%B9%B2%E4%BA%86%E5%95%A5/</link><pubDate>Wed, 01 Mar 2023 18:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230301%E6%88%91%E9%83%BD%E7%94%A8chatgpt%E5%B9%B2%E4%BA%86%E5%95%A5/</guid><description>&lt;ol>
&lt;li>写诗&lt;/li>
&lt;li>帮我写程序&lt;/li>
&lt;li>帮我debug&lt;/li>
&lt;li>帮我构造数据&lt;/li>
&lt;li>帮我优化Resume&lt;/li>
&lt;li>梳理NLP知识时，解释不清晰的名词，并给出例子&lt;/li>
&lt;/ol></description></item><item><title>2023-02-20 chatGPT有可能是个骗局吗</title><link>https://huizhixu.github.io/chs/know_how/20230220chatgpt%E6%9C%89%E5%8F%AF%E8%83%BD%E6%98%AF%E4%B8%AA%E9%AA%97%E5%B1%80%E5%90%97/</link><pubDate>Mon, 20 Feb 2023 20:07:58 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230220chatgpt%E6%9C%89%E5%8F%AF%E8%83%BD%E6%98%AF%E4%B8%AA%E9%AA%97%E5%B1%80%E5%90%97/</guid><description>&lt;p>昨天读了一篇文章：&lt;a href="https://www.newyorker.com/tech/annals-of-technology/chatGPT-is-a-blurry-jpeg-of-the-web" target="_blank" rel="noopener">ChatGPT is a blurry JPEG of the web&lt;/a>
。中文翻译在这：&lt;a href="http://www.chinawriter.com.cn/n1/2023/0213/c404090-32622497.html" target="_blank" rel="noopener">ChatGPT是网上所有文本的模糊图像&lt;/a>
 ，无比同意这篇文章说的，&amp;ldquo;有一种模糊是可以接受的，那就是用不同的词重新陈述信息；对于完全捏造的模糊，当我们寻找事实时，我们认为这是不可接受的&amp;rdquo;。这就是我使用chatGPT的感受。&lt;/p></description></item><item><title>2023-02-16 如何理解Seq2seq</title><link>https://huizhixu.github.io/chs/know_how/20230216%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3seq2seq/</link><pubDate>Thu, 16 Feb 2023 18:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230216%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3seq2seq/</guid><description>&lt;p>先搞清楚几个基本概念：&lt;/p>
&lt;p>Seq2seq是一个概念，它的表现形式就是有encoder和decoder的一个结构。换言之，有encoder和decoder就可以说这是一个Seq2seq模型。编码器或者解码器具体可以用CNN、RNN、LSTM或者attention来构建。&lt;/p></description></item><item><title>2023-02-13 chatGPT 在攻陷所有人</title><link>https://huizhixu.github.io/chs/know_how/20230213chatgpt%E5%9C%A8%E6%94%BB%E9%99%B7%E6%89%80%E6%9C%89%E4%BA%BA/</link><pubDate>Mon, 13 Feb 2023 20:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230213chatgpt%E5%9C%A8%E6%94%BB%E9%99%B7%E6%89%80%E6%9C%89%E4%BA%BA/</guid><description>&lt;p>承认吧，现在全世界最火就是chatGPT。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>去参加了王建硕老师那边组织的关于chatGPT的讨论。&lt;/p>
&lt;ol>
&lt;li>会上的讨论：对新技术进行哲学思考无疑是最让我震撼的。正因为他们进行深度思考，才能真正看到事物的本质，才能正确判断事物的走向。&lt;/li>
&lt;li>从心理学和教育学来看，也开拓了我的眼界。&lt;/li>
&lt;li>从高效使用和商业化来看，它无疑会改变很多人的生活。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>chatGPT的使用感受很不错。&lt;/p></description></item><item><title>2023-02-09 如何理解自注意力机制</title><link>https://huizhixu.github.io/chs/know_how/20230209%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 09 Feb 2023 08:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230209%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</guid><description>&lt;h2 id="理解输入与输出">理解输入与输出&lt;/h2>
&lt;ul>
&lt;li>输入有可能是一个 vector，有可能是多个 vector&lt;/li>
&lt;li>输出：
&lt;ul>
&lt;li>一个序列对应一个 label。the whole sequence has a label
&lt;ul>
&lt;li>例子：在情感分析里面，This is good 对应的输入是多个 vector，输出为 positive，是一个vector。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一个 vector 对应一个 label。一个序列对应多个 label。
&lt;ul>
&lt;li>例子：在词性标注里面，This is good 对应的输入是多个 vector，输出为 代词，动词，形容词。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>模型决定 label 的个数。seq2seq 任务
&lt;ul>
&lt;li>例子：在机器翻译里面，This is good 对应的输入是3个 vector，中文翻译是”不错“，输出为2个 vector。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="一个vector对应一个label的情况即输入和输出一样多也叫做sequence-labeling">一个vector对应一个label的情况，即输入和输出一样多，也叫做sequence labeling&lt;/h2>
&lt;ul>
&lt;li>例子： I saw a saw&lt;/li>
&lt;li>如何解决 sequence labeling 的问题：用 fully connected network 对每一个 input vector 进行作用&lt;/li>
&lt;li>弊端：
&lt;ul>
&lt;li>用 fully connected network 来输出，假设对 I saw a saw 做词性标注。对于 FC 层来说，两个 saw没有什么不同，但是他们实际上一个是动词，一个是名词。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>解决思路：考虑更多的上下文。每一个 fc 层，都对所有的输入作用。或者给他一个 window，作用于相邻的几个 input vector。但是作用还是有限，计算也很复杂。&lt;/li>
&lt;/ul>
&lt;p>我们想考虑整个 sequence，但是不想把 sequence 所有的数据都包括在里面，就有了 self-attention。&lt;/p></description></item><item><title>2023-01-31 如何用HuggingFace对不均衡类别进行分类</title><link>https://huizhixu.github.io/chs/know_how/20230131%E5%A6%82%E4%BD%95%E7%94%A8huggingface%E5%AF%B9%E4%B8%8D%E5%9D%87%E8%A1%A1%E7%B1%BB%E5%88%AB%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB/</link><pubDate>Tue, 31 Jan 2023 19:31:50 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20230131%E5%A6%82%E4%BD%95%E7%94%A8huggingface%E5%AF%B9%E4%B8%8D%E5%9D%87%E8%A1%A1%E7%B1%BB%E5%88%AB%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB/</guid><description>&lt;h2 id="数据均衡">数据均衡&lt;/h2>
&lt;p>做文本分类时，如果类别数量差别不大，可以用hugging face的Trainer类，训练代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>model &lt;span style="color:#ff79c6">=&lt;/span> BertForSequenceClassification&lt;span style="color:#ff79c6">.&lt;/span>from_pretrained(&lt;span style="color:#f1fa8c">&amp;#34;bert-base-chinese&amp;#34;&lt;/span>, num_labels&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">len&lt;/span>(labels),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> problem_type&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;multi_label_classification&amp;#34;&lt;/span>, id2label&lt;span style="color:#ff79c6">=&lt;/span>id2label,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> label2id&lt;span style="color:#ff79c6">=&lt;/span>label2id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tokenizer &lt;span style="color:#ff79c6">=&lt;/span> BertTokenizerFast&lt;span style="color:#ff79c6">.&lt;/span>from_pretrained(&lt;span style="color:#f1fa8c">&amp;#34;bert-base-chinese&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">def&lt;/span> &lt;span style="color:#50fa7b">compute_metrics&lt;/span>(p):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preds &lt;span style="color:#ff79c6">=&lt;/span> p&lt;span style="color:#ff79c6">.&lt;/span>predictions[&lt;span style="color:#bd93f9">0&lt;/span>] &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">isinstance&lt;/span>(p&lt;span style="color:#ff79c6">.&lt;/span>predictions,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">tuple&lt;/span>) &lt;span style="color:#ff79c6">else&lt;/span> p&lt;span style="color:#ff79c6">.&lt;/span>predictions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#ff79c6">=&lt;/span> multi_label_metrics(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> predictions&lt;span style="color:#ff79c6">=&lt;/span>preds,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels&lt;span style="color:#ff79c6">=&lt;/span>p&lt;span style="color:#ff79c6">.&lt;/span>label_ids)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>training_args &lt;span style="color:#ff79c6">=&lt;/span> TrainingArguments(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output_dir&lt;span style="color:#ff79c6">=&lt;/span>model_directory, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> learning_rate&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">5e-5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> per_device_train_batch_size&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> per_device_eval_batch_size&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_train_epochs&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataloader_drop_last&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#ff79c6">True&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> weight_decay&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">0.01&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> save_steps&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">50&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logging_steps&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trainer &lt;span style="color:#ff79c6">=&lt;/span> Trainer(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model&lt;span style="color:#ff79c6">=&lt;/span>model,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args&lt;span style="color:#ff79c6">=&lt;/span>training_args,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> train_dataset&lt;span style="color:#ff79c6">=&lt;/span>data[&lt;span style="color:#f1fa8c">&amp;#34;train&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eval_dataset&lt;span style="color:#ff79c6">=&lt;/span>data[&lt;span style="color:#f1fa8c">&amp;#34;train&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokenizer&lt;span style="color:#ff79c6">=&lt;/span>tokenizer,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> compute_metrics&lt;span style="color:#ff79c6">=&lt;/span>compute_metrics
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trainer&lt;span style="color:#ff79c6">.&lt;/span>train()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trainer&lt;span style="color:#ff79c6">.&lt;/span>evaluate()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>model_directory 是模型存储路径，data是数据。&lt;/p></description></item><item><title>2022-12-10 HuggingFace的Dataset的使用</title><link>https://huizhixu.github.io/chs/know_how/20221210huggingface%E7%9A%84dataset%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 10 Dec 2022 18:51:00 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20221210huggingface%E7%9A%84dataset%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="hub上的数据集a-namedatasets-from-the-huba">hub上的数据集&lt;a name="datasets from the hub">&lt;/a>&lt;/h2>
&lt;p>（这里不是互联网上任意的数据集，专指Huggingface的hub上面的，就是可以用关键字直接下载的）&lt;/p>
&lt;p>数据集可以在&lt;a href="https://huggingface.co/datasets" target="_blank" rel="noopener">https://huggingface.co/datasets&lt;/a>
 找到，另外也可以用**&lt;code>datasets.list_datasets()&lt;/code>
来看有什么数据集，然后通过关键字下载。&lt;/p></description></item><item><title>2022-10-24 在程序里起名有很多要注意的</title><link>https://huizhixu.github.io/chs/know_how/20221024%E5%A6%82%E4%BD%95%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%B5%B7%E5%90%8D/</link><pubDate>Mon, 24 Oct 2022 20:51:00 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20221024%E5%A6%82%E4%BD%95%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%B5%B7%E5%90%8D/</guid><description>&lt;p>最近检查以前写的代码，发现我给不同的功能函数或者变量起的名不是很精确。 比如数据处理这个阶段，就很容易取 &lt;code>data_process&lt;/code>， &lt;code>get_data&lt;/code>，&lt;code>process_data&lt;/code>，&lt;code>data_preprocess&lt;/code>，&lt;code>deal_with_data&lt;/code> 这些名字。再比如很多类的主入口，我经常会写 &lt;code>run()&lt;/code>、&lt;code>xx_driver()&lt;/code> 等等。&lt;/p></description></item><item><title>2022-08-02 用 HanLP 分词时如何自定义词典</title><link>https://huizhixu.github.io/chs/know_how/20220802%E7%94%A8hanlp%E5%88%86%E8%AF%8D%E6%97%B6%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%85%B8/</link><pubDate>Tue, 02 Aug 2022 17:51:00 +0800</pubDate><guid>https://huizhixu.github.io/chs/know_how/20220802%E7%94%A8hanlp%E5%88%86%E8%AF%8D%E6%97%B6%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%85%B8/</guid><description>&lt;p>在分词的过程中，碰到一个这样的句子：&lt;/p>
&lt;p>&amp;lsquo;&lt;code>公司产品品质持续提升，单晶硅片用料比例大幅高于行业平均，单晶硅料价格上涨。&lt;/code>&amp;rsquo;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> hanlp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tok &lt;span style="color:#ff79c6">=&lt;/span> hanlp&lt;span style="color:#ff79c6">.&lt;/span>load(hanlp&lt;span style="color:#ff79c6">.&lt;/span>pretrained&lt;span style="color:#ff79c6">.&lt;/span>tok&lt;span style="color:#ff79c6">.&lt;/span>COARSE_ELECTRA_SMALL_ZH)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sentence &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;公司产品品质持续提升，单晶硅片用料比例大幅高于行业平均，单晶硅料价格上涨。&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sen_list &lt;span style="color:#ff79c6">=&lt;/span> tok(sentence)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">print&lt;/span>(sen_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#f1fa8c">&amp;#39;公司&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;产品&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;品质&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;持续&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;提升&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;，&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;单晶&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;硅&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;片&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;用&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;料&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;比例&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;大幅&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;高于&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;行业&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;平均&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;，&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;单晶&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;硅&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;料&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;价格&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;上涨&amp;#39;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;。&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出来，这里“单晶硅片”，“单晶硅料”， 被分为了“单晶”“硅”“料”和“单晶”“硅”“片”。&lt;/p></description></item></channel></rss>