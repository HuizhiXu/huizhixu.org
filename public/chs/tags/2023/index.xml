<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2023 on 徐慧志的个人博客</title>
    <link>https://huizhixu.github.io/chs/tags/2023/</link>
    <description>Recent content in 2023 on 徐慧志的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>chs</language>
    <lastBuildDate>Sun, 13 Aug 2023 18:31:50 +0800</lastBuildDate><atom:link href="https://huizhixu.github.io/chs/tags/2023/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2023-08-13 Linux回顾</title>
      <link>https://huizhixu.github.io/chs/life/20230813linux%E5%9B%9E%E9%A1%BE/</link>
      <pubDate>Sun, 13 Aug 2023 18:31:50 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/chs/life/20230813linux%E5%9B%9E%E9%A1%BE/</guid>
      <description>最近没有那么忙，便回顾了一下Linux方面的知识 ，看看还有什么比较好用的指令。看完第一二章便发现，原来没有什么新鲜的，这里面的指令我在工作中都用过了。不知不觉中，我慢慢地掌握了这些在以前看起来好难的东西。
一开始是什么时候开始用Linux的呢？大概是写毕业论文的时候，要在系里面的cluster跑我的程序。那个时候装个python，装个anaconda都觉得不简单（一般都是助教帮忙装上的），配置个环境心里都有很多疑问，为什么我的kernel不起作用了，为什么要配置路径？配置路径要配置哪个啊？
好不容易配置好环境了，跑程序也经常出问题，broken pipe是一段时间的噩梦。程序运行一次需要的时间贼长，太长了ssh就会断掉。睡觉的时候我的电脑经常通宵亮着跑程序，第二天一起来第一件事就是胆战心惊看服务器有没有断，后来我才知道可以用screen 和tmux在后台运行。
我当时也不懂wget brew pip啥的，看着班上的大神朋友，也不用鼠标点击，在黑黑的屏幕上敲了一些命令，哗哗哗的就出来一堆内容，不禁感叹，真牛啊！
现在这些对于我也完全不是问题了，现在基本每天都会和服务器打交道。接触服务器多了，想要用什么就会去查，就是这样慢慢的学过来的。
不过阅读过程中也有收获，我知道了以前Unix系统曾经用打印机来作为输入输出。现在看起来多么不可思议！</description>
    </item>
    
    <item>
      <title>2023-07-31 NLP资源</title>
      <link>https://huizhixu.github.io/chs/link/20210731nlp%E8%B5%84%E6%BA%90/</link>
      <pubDate>Mon, 31 Jul 2023 18:31:50 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/chs/link/20210731nlp%E8%B5%84%E6%BA%90/</guid>
      <description>视频 Natural Language Processing with Dan Jurafsky and Chris Manning </description>
    </item>
    
    <item>
      <title>2023-07-31 更换博客皮肤</title>
      <link>https://huizhixu.github.io/chs/life/20230731%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E7%9A%AE%E8%82%A4/</link>
      <pubDate>Mon, 31 Jul 2023 18:31:50 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/chs/life/20230731%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E7%9A%AE%E8%82%A4/</guid>
      <description>哈哈哈，我发现我文章没写多少，时间都花在创建/修改/更换博客、博客域名、托管服务器和博客主题上。但不得不说，这个过程真的很有意思啊。
之前博客主题用的是github-styles，它的页面和github一模一样。左边是个人头像和个人信息，右边上面是置顶文章，然后是文章提交热力图，再往下就是文章的时间线，一目了然。它还能切换light/dark模式.
一切都挺好的，但是最近觉得有点不太方便了，因为我想将文章归类存储和搜索，将生活的感想和技术上的总结分开，此外还想加一个英文和德语的界面。
但是还是打算用Hugo，hugo真的是很方便啊，之前不太懂的我也跟着教程做出来了。于是打开Hugo的主题页面开始浏览，看了几个，最后决定用这个叫做blist主题的，它支持multi-lingual，页面也很漂亮。
将主题 git clone到现在的博客之后，按照步骤开始操作，但是没有生效。别着急，一般都不会一次性生效的。
我又重新安装操作了好几遍，并且大胆地删了一些上个主题的遗留的文件夹，但是怎么改动博客都运行不起来了。
于是去github看了一下。发现有两个repo都是和博客相关的。事实上距离上一次折腾博客已经有了一年多了，我早已经忘记为什么要分两个repo了。而且我设置了一个自动化提交，只要运行一个bash文件就可以写文章。
于是我又重新开始看教程，敲敲打打，修修补补。
在这个过程中看到有人吐槽hugo的文档写的不清晰，能够感受到他的愤怒了，哈哈。
Why Hugo&amp;amp;rsquo;s Documentation Sucks 除了看Hugo的文档之外，Hugo论坛hugo discourse 也是很有帮助的。
我最后遇到的问题是，博客在本地启动，页面显示一切正常。但是在域名启动，页面显示就很奇怪，我不懂前端，猜测是部分css文件没有奇效。找了很多答案，都没有改变。最后在这个论坛上提问，很快就有人回答了。太感谢了！
互联网世界的美妙就在于这吧。有超级多的资料可以学习，有前辈程序员写的教程，有各种论坛答疑讨论，有开源仓库的无私奉献。享受这些美好，同时也要不断地帮助别人。
放一个修改前后的对比图：</description>
    </item>
    
    <item>
      <title>2023-07-11 如何应对职场压力</title>
      <link>https://huizhixu.github.io/chs/life/20230711%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E8%81%8C%E5%9C%BA%E5%8E%8B%E5%8A%9B/</link>
      <pubDate>Tue, 11 Jul 2023 18:31:50 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/chs/life/20230711%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E8%81%8C%E5%9C%BA%E5%8E%8B%E5%8A%9B/</guid>
      <description>想了好久要不要写这一篇，因为它传述的价值观和人生观和我们（全世界）的教育都有点不一样。而我也是看了才发现，还能这样？（我被驯化太久了）
大家小时候的教育，都是叫我们认真学习，对人有礼貌，尊敬老师，关心同学。
长大了，要认真工作，热爱生活，对人友好（包含孝敬父母、广交朋友），成家立业。
如果上面不能做到，那至少要做到作息规律，不点外卖。
如果还不能做到，那至少态度要做到积极向上。
假设有一个人犯了罪，大家也还是希望他能够改过自新，积极生活。“改过自新”这四个字，就有一种积极的感觉在里面。
这种积极的观念深入人心，使得整个社会在人生态度上的中立面，是倾向积极这方面的。
但是恒子奶奶，一个92岁高龄的日本女士，在书里面传达的是让人更加轻松的人生态度。
书名叫做《宝藏系列：人生通透+活得通透》，微信读书APP有。
1. 在工作中是否有过人际关系的烦恼？
恒子奶奶答：还没有碰过严重的问题。因为我觉得最根本的是，人不要有太多的期望。
比如，“我想如何”，“给我什么”之类的话，尽量不要多说。
无论是职场还是家庭，“只要是别人给予的东西，自己就应该感谢对方”。如果以这样的心态和别人相处，人际关系就不可能出现大问题。
如果在工作生活中埋怨别人不作为，不帮忙，“上司不指导我”，“同事不带我”，认为“下属就该如此”，或者“上司应该这么做”，有这种“别人这样做是理所当然”的想法，那么一定会失落和烦恼。
因为每个人除了职责，他的角色本质是“人”。在现在这个时代，一定要尊重别人的“人”性。
2. 在养育孩子方面，要有“追求家庭和睦”的想法。
其他家庭都这么做，世间大众都这么做，“别人家都去了夏令营/补课/学钢琴，我们家小孩去不了，太焦虑了。”
父母彼此的关系，婆媳关系出现问题，“为什么自己的丈夫不帮忙做家务，孩子成绩不好？为什么别人家都有保姆或者长辈来带小孩？”。
一旦和别人家比较，或者家里发生纠纷、家庭氛围不好，就会影响孩子们的心理状态。维持家庭和睦，放弃“为什么只有自己家这样”的想法，这样焦虑才不会影响孩子们。就算给予不了孩子们太多，但是只要让他们感受到父母在爱护他们，他们依然是有安全感和满足的。
家庭和睦带给孩子人生的裨益更多。
3. 您不认为要通过工作实现自我价值，只要维持生活就可以了吗？
恒子奶奶：是的，我既没有想要出人头地，又不求他人认可。只要完成领导安排的工作，并能获得报酬，我就心满意足了。现在有很多人被“自我实现”的观念所困扰，对他人和自己的要求都很高。
4. 面对性格不合的人或没有礼貌的人，你是否会感到心烦意乱呢？
恒子奶奶：在任何场合都可能碰到没有礼貌或者性格不合的人，我唯一能做的就是保持距离，尽量减少与他们相处。想要改变别人很难，毕竟我也不是什么了不起的人，没有资格要求别人改变。
5. 如果不可避免要经常打交道的同事没有完成任务，您会怎么办？
恒子奶奶：遇到这种情况，我会通过沟通来解决。首先，我会避免使用攻击性语言。比如，”我是这样考虑的，你呢“，”你那样做有什么理由吗“等。
如果确实需要对方改变，可以建议他，”我认为这种方法更好，你可否试着改变一下“，并且需要注意，我们在提出要求时不要指责对方，而是拜托对方。不要从一开始就把对方视为敌人，也不要一味地指责对方，而是在沟通中了解彼此的立场。
6. 有时候朋友越多烦恼越多
恒子奶奶：我认为最好不要跟合不来的人交往。当今时代，社交网络十分发达，人们很容易建立”广而浅“的人际关系，但是人际关系复杂会带来压力。要意识到我们被灌输了”必须拓展人脉，广交朋友“的观念。
有的人不知不觉就成为了朋友，而且交往了很久。
有的人短暂联系，也没有关系。
7. 独处并不丢人，是自然的事情。
有一些人在周末独自度过的时候，在社交网络上看到朋友和别人愉快地吃饭玩耍的照片，于是内心厌恶自己。
实际上，他人如何生活，对我丝毫不重要。有的人虽然朋友众多，表面上很开心，但内心却小心翼翼，局促不安。如果是独自一人，就不必顾忌他人，可以悠闲舒适地度日。
而且，有些人在独处的时候，总想着要做点什么，如果不做点什么，就觉得自己虚度了时光。“必须做什么”这样的想法让人无法享受独处，其实，什么都不用提前计划去做，在独处的过程中想到什么就去做，这样才会感受到自由。
上面就是看书的时候对我很有帮助的认识。
在职场中，我们经常会有期望。我们期待一个良好的环境，老板战略清晰，同事可靠，流程清晰且不冗余，大家能和谐相处。
实际的职场环境里，老板的想法东一榔头西一棒子，同事连简单的任务都完成不好，流程这个东西要么不存在，要么就等上几个月，和同事之间因为利益冲突而勾心斗角。成年人生活在一个这么残忍的环境，怎么会没有压力呢？
而恒子奶奶的这套做法，既不要求自我实现，又对别人没有期待，也不用广交朋友，还能享受独处。这样不仅职场压力没有了，人生压力也没有了，是真正意义上的躺平。
当然，我知道，要相信这些道理是很难的，要完全做到这个也是很难的。有些人志存高远，有些人喜欢热闹。但是它提供了一个保持生活清净的可能性。偶尔我们也需要用这些来宽慰自己。</description>
    </item>
    
    <item>
      <title>2023-03-02 季读——2023年（一）</title>
      <link>https://huizhixu.github.io/chs/life/20230302%E5%AD%A3%E8%AF%BB/</link>
      <pubDate>Fri, 02 Jun 2023 18:31:50 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/chs/life/20230302%E5%AD%A3%E8%AF%BB/</guid>
      <description>本来过年的时候想着今年要读一些书，每个月都至少读一本，结果今天发现已经三月份了，我还在读第一本书。
虽然没有读书，但是看了很多别人写的材料，博客，听了很多访谈。当然，主要因为chatGPT的爆火，公众号每天都充斥着关于大模型的知识。 有一些大咖表面上在聊chatGPT，其实是趁机卖自己的课和书；还有一些人觉得这是个绝佳的创业的机会；还有一些号，明明和他八竿子打不着关系，还要硬往上面蹭。
还记得去年冬天，行业加上疫情的原因，一片萧瑟，各大媒体都在唱衰，说是 AI 寒冬，结果过了个年就变成了AI盛世。 也不知道这个热火朝天的劲头能持续多久。
chatGPT会是一个变革性的产品吗？就像信息时代让我们的生活发生翻天覆地的变化那样，人工智能时代也会让我们有完全不同的生活体验吗？ 还很难说。人工智能只是少数人的游戏，因为目前来说，他太昂贵了。 先进的技术带来高效，但是与固有的生产方式相比，它并不一定能省钱。
另外，通过chatGPT，加深了我对认知的重视程度。 一开始我总是在想 openAI 和用户数据之间的关系，想着他们会不会用户输入的数据进行清洗，在此基础上做后续模型升级。 我以为只有花钱用上chatGPT的那些人，他们的数据才是有价值的数据。这种认知就错了。数据永远都是有用的，但是对于每一个组织的作用是不同的。 而openAI不需要去深究这些数据，他们只需要提供接口服务就可以收割全世界。当然他们肯定想做更多。所以认知上的差异，会导致决策差异。
不过，我还有另外一些疑问。机器和人对齐，增强了机器的性能。这其实是仿生学，哪种动物在哪方面做得好，我们就利用这方面，学习这方面。 但是，对于人来说， 我们人类除了学习用文字写出来的知识，我们也学会了一种&amp;quot;上下文&amp;quot;。一个小学生，在学校不仅仅学了加减乘除，也学会了如何和同学打交道，每一件事情的发生都在他身上有影响。 那么机器如何拥有这种能力呢？
推荐我读的一些博客文章：
Why everybody feels like theyr&amp;rsquo;e faking it? https://www.newyorker.com/magazine/2023/02/13/the-dubious-rise-of-impostor-syndrome Fix the machine, not the person by aaron Swartz
http://www.aaronsw.com/weblog/productivity Life in Suburbia: Land of Cliche http://www.aaronsw.com/weblog/suburbia how to work hard http://paulgraham.com/hwh.html 做大事的人除了有天分，还有练习以及时间投入。
《微积分的力量》
里面引用了两段话
I do not remember having felt, as a boy, any passion for mathematics, and such notions as I may have had of the career of a mathematician were far from noble.</description>
    </item>
    
    <item>
      <title>2023-06-02 季读——2023年（二）</title>
      <link>https://huizhixu.github.io/chs/life/20230602%E5%AD%A3%E8%AF%BB/</link>
      <pubDate>Fri, 02 Jun 2023 18:31:50 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/chs/life/20230602%E5%AD%A3%E8%AF%BB/</guid>
      <description>今天早上醒来，看到朋友圈大家都在（给娃）庆祝儿童节，发现居然已经到了6月了。想起自己的季读还没写多少。😄
由于行业技术的快速发展，这个季度基本都在一个提高认知、拓宽眼界的技术氛围里。因此，我在这段时间里阅读的大部分文章都与技术有关。
《Prompt Tuning的万字综述》 （https://wjn1996.blog.csdn.net/article/details/120607050） 读了四个多小时，没有全部读完。之前对Prompt Tuning的理解仅仅停留在第三章：如何构建模板，但是到第三章只是入门，后面还有更多的细节。最精髓的就是一句话：prompt的本质是参数有效性学习。
《LLM as Controller 无限拓展LLM的能力边界》（https://zhuanlan.zhihu.com/p/626736120） 作者的抽象能力很强，它描述了LangChain那一套如何运作的，让我很受启发。
它把大模型回答问题的这个过程抽象成一个系统，这个系统只包括LLM和Agent，其中LLM理解输入并且将输入转化成不同的指令，Agent接收指令并行动。假设LLM理解能力很强，100%理解输入的意思，Agent 力量很强，100%能够执行命令。那么，理论上这个LLM+Agent的组合能够做任何事情。
那这样的话，可以进一步缩小空间，问题变成下面两个问题：第一，LLM对输入进行理解之后，转变成怎样的指令，才能被更好地被Agent执行？第二，Agent要去哪里执行指令，才能找到更好的回答？
下面是一些例子，越往下，功能越多，也越难做。这一层一层叠加，真是牛啊~
Visual ChatGPT：单一任务——agent去一些基于视觉的模型里面找答案。
HuggingGPT：多重任务——agent根据不同的输入去不同的模型（基于hf hub）里面找答案。
Toolformer：多重任务——agent的范围更大，是网络上的不同的API（例如谷歌搜索、谷歌翻译）等。
AutoGPT：多重任务——llm和agent能自我迭代。agent会不断反馈，llm根据反馈的答案调整生成更好的指令，形成正向反馈。
《它帮大语言模型消除“幻觉”，一个月内三家向量数据库创业公司获新融资》（https://mp.weixin.qq.com/s/Fhz2O03JkdqZWug2cF7v_A） 为啥大家的目光最近会聚集在向量数据库上面呢？主要是由于大模型的缺陷。
向量数据库是怎么用的呢？以下是一个理解。
假设我们现在有一堆文档，内容是某个保险领域的所有条款。用户提出一些问题，例如，用户问：老人在什么情况下可以投某种保险？我们想要GPT4在这堆文档中找出答案，回答用户。
首先，要知道的是，GPT4输入的token长度是有限制的。大模型只能输入几千个token，但这堆保险文档有几百万个token，大模型它没法一次读啊。
很容易想到，大模型没法一次读，那就拆解让它读多次就好啦~
但是，拆解也是不OK的。主要原因是一，这几百万个token截断之后再拼起来的效果不好。二，太贵了，太慢了。调用GPT4几万次只为回答一个问题，没有人会这么做。
那么就用到向量数据库了。向量数据库会存向量，也是就一堆拥有很多中括号和小数的数值。它一般用来做相似度查找。
我们可以把上面的文档都存在向量数据库里，把用户的问题也转化为向量，然后去搜相似的文本。文本找出来了之后，再传给大模型，让它去分析，给出答案。
这样大模型的输入是不是一下子从百万级变成了万千级，而且向量数据库搜索的效率也很快，所以理论上整个流程就打通了。
这个本地知识库，其实在每个领域都能应用，特别是文本资料很多的法律、保险、金融领域。
但是，向量数据库是一个中间产物。如果我们基于某一个专业领域的大量数据训练了一个大模型，它本身读了很多这个领域的知识，所有的知识点它都了然于心，那么就不需要向量数据库了。或者，如果大模型的输入支持百万、千万数量级的token，也不需要向量数据库了。未来有一天或许能实现呢？
《最早出发的中国大模型创业者：“贫穷限制了我们的想象力”》 这篇文章我读了好多遍，虽然我经历没有周博士那么多，看得没有那么远，但在一些方面也感同身受。还蛮佩服他19年出来创业的，因为后面就是AI寒冬了。那时AI领域像是一潭死气沉沉的冬水，大家发现算法也不是万能的呀，还不如规则和廉价人工好使（狗头）。然后今年，情况明显不一样了，突然变成了so-called ”AI盛世“。但是大模型真的能快速落地吗？
特别是在周博士在的金融领域，有两个限制：一是对结果要求非常准确；二是国内的企业（专指国企央企）有信创的需求。这种情况下，如何去研发大模型，要研发怎样的大模型呢？
他这里面说“贫穷限制了想象力”，在1980年做开发的时候需要考虑节省算力。刚好《黑客与画家》里面也写了“他们在编程的时候需要删去一部分代码，为了节省内存”，但是大模型需要的就是海量数据+超乎想象的算力。
看完文章，我深深地感受到：时代的局限带给单个个体的影响，近乎一种残忍，哪怕是超级有能力的人，也无法跳出禁锢，上一代人没有能力在千亿参数层级去想象，这就已经决定了结果。
《疯狂的幻方：一家隐形AI巨头的大模型之路》（https://mp.weixin.qq.com/s/T-ccVKG_LS4OvUXQIfsoeg） 一家宣称不做垂类和应用，只做研究的公司。钱和算力都有，就是不知道有没有技术，哈哈持怀疑态度。（真羡慕他们的算力啊~ ）
最近的技术变化得实在太快了。在非常tough地学习了一天的新知识之后，精疲力尽地，第二天早上起来，发现又出来新的东西了。而且很有可能，昨天学的过时了。。。
所以，也看了不会过时的文章和书：
《从权力和垄断的演化机制，看投资(一）》 这篇文章的最重要的话就是：
权力斗争的关键就是 i) 在关键环节上，尽可能让自己不可替代。ii) 同时在与自己合作的关键环节上，确保有替代者可互相制约。
这篇文章是纠结要不要跳槽的那时候读的，让我看清了自己在前公司的地位：我的可替代性太强了。这也提醒我了，要去慢慢地构建自己的生态圈。
《软件工程》——李爱萍
《黑客与画家》
这两本书的内容下次写吧。</description>
    </item>
    
    <item>
      <title>2023-05-18 最近觉得很好用的两个AI产品</title>
      <link>https://huizhixu.github.io/chs/life/20230518%E6%9C%80%E8%BF%91%E8%A7%89%E5%BE%97%E5%BE%88%E5%A5%BD%E7%94%A8%E7%9A%84%E4%B8%A4%E4%B8%AAai%E4%BA%A7%E5%93%81/</link>
      <pubDate>Thu, 18 May 2023 18:31:50 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/chs/life/20230518%E6%9C%80%E8%BF%91%E8%A7%89%E5%BE%97%E5%BE%88%E5%A5%BD%E7%94%A8%E7%9A%84%E4%B8%A4%E4%B8%AAai%E4%BA%A7%E5%93%81/</guid>
      <description>第一个产品是ora.ai（之前域名是ora.sh），在这个上面可以创建专业领域的机器人。
ora上面五花八门的机器人都有，解读法律条款的机器人，帮助人们保持心理健康的机器人，图书馆机器人等。
爱学习的我，当然主要是用机器人来学习。刚好最近在学bash语言，于是建了个bash学习机器人。
我分步骤告诉bash机器人，你先给我讲bash的基础知识，然后给我出题，然后批改答案，看我写的对不对，然后给出更好的答案，以及解释他的答案。
基础知识学会了，然后询问他中级语法、高级语法等。bash很容易，三天加起来一共学了没几个小时，差不多就会了。
这里面每一轮操作都都包括下面的环节：(基础|中级|高级)知识学习-&amp;gt;小测验-&amp;gt;批改-&amp;gt;点评我给的答案-&amp;gt;给出自己的答案，并解释答案。 这是很明显的AI改变教育领域的例子，这些步骤已经形成了一个闭环。
然后我又建立了一个FastAPI的机器人。最近换工作了，接手的项目用FastAPI写的，这次接手并没有遇到很难的地方。除了FastAPI本身具有框架简单易读、接口文档有条理测试简单的优点外，FastAPI小助手帮了不少忙。 首先，代码里面有任何不懂的地方，我都会提问，而且是刨根问底地问。其次进行功能拓展的时候，如果写出Bug了，我也会在上面问可能的解决方法。最后，我又把FastAPI的官方文档看了一遍，不懂的也问它。这一次效率明显比去年3月更高了。
Ora调用的是OpenAI的GPT4，它和OpenAI网站上的GPT4相比，有两个优点：
免费 专业领域的小机器人能够让我们更能够集中注意力，专注于某一小块的问题。 在OpenAI网站上，chatgpt的页面开了很多session，用来问不同领域的问题，注意力经常会被分散，Ora则不会出现这个问题。 第二个产品是Call Annie，它的网址是https://callsam.ai/，这个应用自称是大家24小时的AI朋友，大家可以和它打电话闲聊。它很适合所有需要练习口语的小学生，大学生，以及像我这样的职场人。
它最大的优点是能够用国内号码注册。iPhone上可以接通视频，其他设备包括网页端只能接通音频。我比较推荐音频接通，因为视频里面的“真人”不是很“真”。
除了这两款产品之外，还有一些集成工具，例如you.com，poe等。这些都不错，但是我的需求没有那么大，只是偶尔会用一下。</description>
    </item>
    
  </channel>
</rss>
