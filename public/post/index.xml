<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HuizhiXu 的个人博客</title>
    <link>https://huizhixu.github.io/post/</link>
    <description>Recent content in Posts on HuizhiXu 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 24 Oct 2022 20:51:00 +0800</lastBuildDate><atom:link href="https://huizhixu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022-10-24 如何在程序中起名</title>
      <link>https://huizhixu.github.io/post/20221024%E5%A6%82%E4%BD%95%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%B5%B7%E5%90%8D/</link>
      <pubDate>Mon, 24 Oct 2022 20:51:00 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20221024%E5%A6%82%E4%BD%95%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%B5%B7%E5%90%8D/</guid>
      <description>如何在程序中起名 最近检查以前写的代码发现，我给不同的功能函数或者变量起的名不是很精确。
比如数据处理这个阶段，就很容易取data_process， get_data, process_data, data_preprocess，deal_with_data这些名字。再比如很多类的主入口，我经常会写run()、xx_dirver()等等。
想一个名字看起来简单，但是新建文件那一刻抓耳挠腮肚子里墨水空空，想不到好名字，无奈最后写下写了很多遍的get_data。于是学习给不同的功能函数或者变量取一些适合的名字迫在眉睫。
今天看了关于两篇起名建议的文章，一篇是《变量名不要起得他妈的那么长》，链接在这（https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/）。我跟着这篇文章反省了一下，有时候为了区分很多种情，我就会用下划线连接好几个单词，我自己是觉得很容易读，应该满足readability，但是有的单词很长，所以总体长度也很长，不是很pythonic。
作者给了几个建议：
不要容易看出类型的名字后面加上类型，例如name就不要叫namstring。 写复数，不要用单数加collection。例如holidays比holiday_list好些。 我这个问题还挺严重的，因为我很喜欢写xx_list，yy_dict等。
在写func的名字的时候，不需要把参数也写在功能函数名称里面，因为参数列表能够看出来要处理什么参数。例如merge(table_cells)比merge_table_cells(x)要好。 要精确，不需要把每一个细节都写出。例如recentlyUpdatedAnnualSalesBid这里面每一个单词细节都值得推敲，看是不是为了确保独一性而加的，没有就要去掉。 变量名不要包含能从上下文看出来的单词。如果类名里面已经包含的单词，在类方法就不用再写了。 例如类名有data，已经表明了这个类是和数据相关。那么方法可以直接写process，不需要写data_process。
变量名不要包含无意义的单词。 有以下这些：
data, state, amount, value, manager, engine, object, entity, and instance. Python里面用类型注释很容易避免这些问题，就算用results，不用results_list也可以很快看出results是一个list，有时候是list of list。
第二篇文章是这个《起名的那些事儿》 https://journal.stuffwithstuff.com/2009/06/05/naming-things-in-code/
对于起名他给的建议是：
对于类名，接口名： 用名词，不用形容词 不要用manager或者helper这种词 精确表示 Bad: IncomingMessageQueue CharacterArray SpatialOrganizer Good: Mailbox String Map 对于方法名： 要简短， 也不能太简短 Bad: list.GetNumberOfItems(); Good: list.Count(); Bad: list.Verify(); Good: list.ContainsNull(); 表示动作的话用动词 返回布尔值用问句的形式 Bad: list.Empty(); Good: list.IsEmpty(); list.Contains(item); 返回一个不改变状态的值用名词。 Bad: list.GetCount(); Good: list.Count(); 不要重复 Bad: list.</description>
    </item>
    
    <item>
      <title>2022-08-02 用HanLP分词时如何自定义词典</title>
      <link>https://huizhixu.github.io/post/20220802%E7%94%A8hanlp%E5%88%86%E8%AF%8D%E6%97%B6%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%85%B8/</link>
      <pubDate>Tue, 02 Aug 2022 17:51:00 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220802%E7%94%A8hanlp%E5%88%86%E8%AF%8D%E6%97%B6%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%85%B8/</guid>
      <description>hanlp分词时自定义词典 用hanlp的效果比较好的粗粒度分词模型COARSE_ELECTRA_SMALL_ZH进行分析
碰到一个这样的句子：
&amp;lsquo;公司产品品质持续提升，单晶硅片用料比例大幅高于行业平均，单晶硅料价格上涨。&amp;rsquo;
import hanlp tok = hanlp.load(hanlp.pretrained.tok.COARSE_ELECTRA_SMALL_ZH) sentence = &amp;#39;公司产品品质持续提升，单晶硅片用料比例大幅高于行业平均，单晶硅料价格上涨。&amp;#39; sen_list = tok(sentence) print(sen_list) [&amp;#39;公司&amp;#39;, &amp;#39;产品&amp;#39;, &amp;#39;品质&amp;#39;, &amp;#39;持续&amp;#39;, &amp;#39;提升&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;单晶&amp;#39;, &amp;#39;硅&amp;#39;, &amp;#39;片&amp;#39;, &amp;#39;用&amp;#39;, &amp;#39;料&amp;#39;, &amp;#39;比例&amp;#39;, &amp;#39;大幅&amp;#39;, &amp;#39;高于&amp;#39;, &amp;#39;行业&amp;#39;, &amp;#39;平均&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;单晶&amp;#39;, &amp;#39;硅&amp;#39;, &amp;#39;料&amp;#39;, &amp;#39;价格&amp;#39;, &amp;#39;上涨&amp;#39;, &amp;#39;。&amp;#39;] 可以看出来，这里“单晶硅片”，“单晶硅料”， 被分为了“单晶”“硅”“料”和“单晶”“硅”“片”。
如果我们想要把“单晶硅”分出来。可以设置自定义词典。tok下面有两个参数：dict_force和dict_combine，通过设置这两个参数就可以达到自定义词典的效果。
dict_force和dict_combine有什么区别：
dict_force是强制模式，强制模式的优先级高于统计模型。如果强制模式用于所有文本，会对其他句子进行干扰，所以强制模式一般不用于所有文本，但是可以针对某个特定句子打补丁。
dict_combine是合并模式，合并模式的优先级低于统计模型。就是说句子先用统计模型分词，然后在这个分词的基础上，再进行最长匹配并合并。
先看一下dict_combine的例子：
tok.dict_force = None tok.dict_combine = {&amp;#39;单晶硅&amp;#39;} sentence = &amp;#39;公司产品品质持续提升，单晶硅片用料比例大幅高于行业平均，单晶硅料价格上涨。&amp;#39; [&amp;#39;公司&amp;#39;, &amp;#39;产品&amp;#39;, &amp;#39;品质&amp;#39;, &amp;#39;持续&amp;#39;, &amp;#39;提升&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;单晶硅&amp;#39;, &amp;#39;片&amp;#39;, &amp;#39;用&amp;#39;, &amp;#39;料&amp;#39;, &amp;#39;比例&amp;#39;, &amp;#39;大幅&amp;#39;, &amp;#39;高于&amp;#39;, &amp;#39;行业&amp;#39;, &amp;#39;平均&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;单晶硅&amp;#39;, &amp;#39;料&amp;#39;, &amp;#39;价格&amp;#39;, &amp;#39;上涨&amp;#39;, &amp;#39;。&amp;#39;] 我们一般会用dict_combine，这样就把“单晶硅”分出来了。</description>
    </item>
    
    <item>
      <title>2022-07-19 Thomas拍的烂尾楼</title>
      <link>https://huizhixu.github.io/post/20220719thomas%E6%8B%8D%E7%9A%84%E7%83%82%E5%B0%BE%E6%A5%BC/</link>
      <pubDate>Tue, 19 Jul 2022 19:50:22 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220719thomas%E6%8B%8D%E7%9A%84%E7%83%82%E5%B0%BE%E6%A5%BC/</guid>
      <description>我很喜欢的摄影家Thomas最近发了一组照片&lt;a href=&#34;https://mp.weixin.qq.com/s/0fXR0oElN94qWOQdw3L6oQ&#34;&gt;《烂尾楼里面的微光》&lt;/a&gt;，拍的是西安的两幢烂尾楼，这两幢楼都烂尾好几年了，没有人管。可能是迫于生存压力，某些业主在没通水电的情况下依然住进去了。</description>
    </item>
    
    <item>
      <title>2022-07-07 新现实是活在当下</title>
      <link>https://huizhixu.github.io/post/20220707%E6%96%B0%E7%8E%B0%E5%AE%9E%E6%98%AF%E6%B4%BB%E5%9C%A8%E5%BD%93%E4%B8%8B/</link>
      <pubDate>Thu, 07 Jul 2022 14:07:58 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/20220707%E6%96%B0%E7%8E%B0%E5%AE%9E%E6%98%AF%E6%B4%BB%E5%9C%A8%E5%BD%93%E4%B8%8B/</guid>
      <description>过去的一个礼拜的上海是今年最漂亮的上海，随便刷一刷小红书， 就可以看见满屏的”绝美晚霞“，“火烧云”，”绝美朝霞“，”绝美天空“， ”感觉在欧洲“。欧洲的风景那么美丽，除了历史的沉淀，蓝天白云的加分也是不少。第一次意识到上海也可以像欧洲那么美丽，哈哈。</description>
    </item>
    
    <item>
      <title>Still_test</title>
      <link>https://huizhixu.github.io/post/still_test/</link>
      <pubDate>Sat, 02 Jul 2022 11:48:05 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/still_test/</guid>
      <description>waiting for my new washing machine</description>
    </item>
    
    <item>
      <title>2022-07-02 Test</title>
      <link>https://huizhixu.github.io/post/carolina/</link>
      <pubDate>Sat, 02 Jul 2022 11:34:34 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/carolina/</guid>
      <description>Oh Carolina creeks
Running through my veins
Lost I was born
Lonesome I came
Lonesome I&amp;rsquo;ll alwasys stary
Carolina knows
Why for years I roam
Free as these birds
Light as whispers</description>
    </item>
    
    <item>
      <title>2022-06-29 First Post</title>
      <link>https://huizhixu.github.io/post/first-post/</link>
      <pubDate>Wed, 29 Jun 2022 19:22:05 +0800</pubDate>
      
      <guid>https://huizhixu.github.io/post/first-post/</guid>
      <description>今日上海 高温黄色警报 雷电黄色警报 暴雨蓝色警报 大风黄色警报 冰雹黄色警报
但是今日出现了彩虹</description>
    </item>
    
  </channel>
</rss>
